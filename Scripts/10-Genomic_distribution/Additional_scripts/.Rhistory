theme(legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 14, margin = margin(r = 1, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(nrow = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 14, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot() +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 14, margin = margin(r = 1, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(nrow = 2)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 14, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 14, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot() +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 14, margin = margin(r = 0.5, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 14, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 14, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot() +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 14, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 14, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 14, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot() +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 14, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 18, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 18, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot() +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 16, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 18, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 18, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot() +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 16, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 16))
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 18, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 18, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot(width = 0.9) +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 16, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 16))
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 18, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 18, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot(width = 0.6) +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 16, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 16))
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 18, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 18, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot(width = 0.6) +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9, width = 0.6) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 16, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 16))
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 18, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 18, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot(width = 0.6) +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9, position = position_dodge(width=0.6)) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 16, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 16))
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 18, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 18, dpi = 600)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot(width = 0.6) +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9, position = position_dodge(width=0.6)) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 16, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 18))
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 18, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 18, dpi = 600)
#### 2.5 Percentage of HDWs in lncRNAs (u, x, i, o/e) which coincide with HDWs
#### of genes (pc) taking into account the chromosomes.
TAB4 = data.frame()
for (i in 1:length(species_short_name)) {
spes = species_short_name[i]
spel = species_long_name[i]
tab4 = read.table(paste0(WD, "/", spes, "/", spes, "-ALL-Number-100Kb-HDWs-Percentage_pc_overlap-1.tsv"), header = T, sep = "\t", quote = "\"")
columns = colnames(tab4)
tab4$"Spe" = spel
tab4 = tab4[, c("Spe", columns)]
TAB4 = rbind(TAB4, tab4)
}
write.table(TAB4, paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-1.tsv"), col.names = T, sep = "\t", row.names = F, quote = F)
rm(list = c("TAB4", "tab4", "spes", "spel", "i", "columns"))
#### 2.6 Percentage of HDWs in lncRNAs (u, x, i, o/e) which coincide with HDWs
#### of genes (pc).
TAB5 = data.frame()
for (i in 1:length(species_short_name)) {
spes = species_short_name[i]
spel = species_long_name[i]
tab5 = read.table(paste0(WD, "/", spes, "/", spes, "-ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.tsv"), header = T, sep = "\t", quote = "\"")
columns = colnames(tab5)
tab5$"Spe" = spel
tab5 = tab5[, c("Spe", columns)]
TAB5 = rbind(TAB5, tab5)
}
write.table(TAB5, paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.tsv"), col.names = T, sep = "\t", row.names = F, quote = F)
## Figure.
TAB5[TAB5 == "u"] = "lincRNAs"
TAB5[TAB5 == "x"] = "NAT-lncRNAs"
TAB5[TAB5 == "i"] = "int-lncRNAs"
TAB5[TAB5 == "o/e"] = "SOT-lncRNAs"
TAB5$Class_code = factor(TAB5$Class_code, levels = c("lincRNAs", "NAT-lncRNAs", "int-lncRNAs", "SOT-lncRNAs"))
TAB5$Spe = factor(TAB5$Spe, levels = species_long_name)
gg = ggplot(TAB5, aes(x = Class_code, y = Perc.Coincidence.HDWs_pc, fill = Class_code)) +
geom_boxplot(width = 0.6) +
geom_jitter(aes(shape = Spe), color="black", size=2, alpha=0.9, position = position_dodge(width=0.6)) +
scale_fill_manual(values = c("#e5dd6c", "#e1ad60", "#da6d6d", "#89ab66")) +
scale_shape_manual(values = 1:length(levels(TAB5$Spe))) +
xlab("") +
ylab("Percentage of HDWs overlapping \nwith protein-coding HDWs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 16, margin = margin(r = 0.2, unit = 'cm')),
legend.key.size = unit(1, 'cm')
) +
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 18))
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.png"), height = 7, width = 18, dpi = 600)
ggsave(paste0(WD, "/ALL/ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.pdf"), height = 7, width = 18, dpi = 600)
## Statistical analysis.
R1 = friedman.test(Perc.Coincidence.HDWs_pc ~ Class_code | Spe, data = TAB5)
R2 = pairwise.wilcox.test(TAB5$Perc.Coincidence.HDWs_pc, TAB5$Class_code, paired = TRUE, p.adjust.method = "BH")
rm(list = c("TAB5", "tab5", "spes", "spel", "i", "columns", "gg"))
rm(list = c("csa", "cme", "cla", "lsi", "cmo", "car", "cpe", "cma", "mch",
"im_1", "im_2", "im_3", "im_4", "im_5", "im_6", "im_7", "im_8",
"im_9"))
warnings()
View(R1)
R1
R2
R1$p.value
R1$statistic
R1$parameter
## 0. INSTALL AND LOAD LIBRARIES
suppressMessages(library(png))
suppressMessages(library(ggpubr))
suppressMessages(options(bitmapType='cairo'))
WD = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/10-Distribution/Transcript_density/nr"
species_short_name = c("csa", "cme", "cla", "lsi", "cmo", "car", "cpe", "cma", "mch")
species_long_name = c("C. sativus", "C. melo", "C. lanatus", "L. siceraria", "C. moschata", "C. argyrosperma", "C. pepo", "C. maxima", "M. charantia")
#### 2.6 Percentage of HDWs in lncRNAs (u, x, i, o/e) which coincide with HDWs
#### of genes (pc).
TAB5 = data.frame()
for (i in 1:length(species_short_name)) {
spes = species_short_name[i]
spel = species_long_name[i]
tab5 = read.table(paste0(WD, "/", spes, "/", spes, "-ALL-Number-100Kb-HDWs-Percentage_pc_overlap-2.tsv"), header = T, sep = "\t", quote = "\"")
columns = colnames(tab5)
tab5$"Spe" = spel
tab5 = tab5[, c("Spe", columns)]
TAB5 = rbind(TAB5, tab5)
}
TAB5[TAB5 == "u"] = "lincRNAs"
TAB5[TAB5 == "x"] = "NAT-lncRNAs"
TAB5[TAB5 == "i"] = "int-lncRNAs"
TAB5[TAB5 == "o/e"] = "SOT-lncRNAs"
TAB5$Class_code = factor(TAB5$Class_code, levels = c("lincRNAs", "NAT-lncRNAs", "int-lncRNAs", "SOT-lncRNAs"))
TAB5$Spe = factor(TAB5$Spe, levels = species_long_name)
## Statistical analysis.
R1 = friedman.test(Perc.Coincidence.HDWs_pc ~ Class_code | Spe, data = TAB5)
R2 = pairwise.wilcox.test(TAB5$Perc.Coincidence.HDWs_pc, TAB5$Class_code, paired = TRUE, p.adjust.method = "holm")
R2
R2 = pairwise.wilcox.test(TAB5$Perc.Coincidence.HDWs_pc, TAB5$Class_code, paired = TRUE, p.adjust.method = "BH")
R2$p.value
A = R2$p.value
View(A)
R1$method
suppressMessages(library(dplyr))
suppressMessages(library(circlize))
suppressMessages(library(data.table))
suppressMessages(library(ggplot2))
suppressMessages(library(ggExtra))
suppressMessages(options(bitmapType='cairo'))
spe = "vvi"
lncRNAs_tab="/mnt/doctorado/3-lncRNAs/Vitis_Tom/Results/05-LncRNAs_prediction/vvi/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"
genes_tab="/mnt/doctorado/3-lncRNAs/Vitis_Tom/Results/05-LncRNAs_prediction/vvi/STEP-FINAL/Files/Genes/ORIGINAL_GENES.tsv"
WD = "/mnt/doctorado/3-lncRNAs/Vitis_Tom/Results/10-Distribution/vvi/nr"
AI = "/mnt/doctorado/3-lncRNAs/Vitis_Tom/Additional_info"
chrs = read.table(paste0(AI, "/Chromosomes/", spe, "_chrs.txt"), header = F, sep = "\t", quote = "\"")
table_conv = data.frame(chrs.old = chrs$V1, chrs.new = sprintf("%02d", 1:length(chrs$V1)))
table_conv$chrs.new = paste0("chr", table_conv$chrs.new)
chrs.sizes = read.table(paste0(WD, "/", spe, ".sizes_genome.txt"), header = F, sep = "\t", quote = "\"")
chrs.sizes = merge(chrs.sizes, table_conv, by.x = "V1", by.y = "chrs.old", all.x = F)
chrs.sizes$V1 = chrs.sizes$chrs.new
chrs.sizes$chrs.new = NULL
colnames(chrs.sizes) = c("Chr", "Start", "End")
rm(list = c("chrs"))
DB = read.table(lncRNAs_tab, header = T, sep = "\t", quote = "\"")
DB = merge(DB, table_conv, by.x = "Chr", by.y = "chrs.old", all.x = F)
DB$Chr = DB$chrs.new
DB$chrs.new = NULL
Genes = read.table(genes_tab, header = T, sep = "\t", quote = "\"")
Genes$Class_code = "pc"
Genes = merge(Genes, table_conv, by.x = "Chr", by.y = "chrs.old", all.x = F)
Genes$Chr = Genes$chrs.new
Genes$chrs.new = NULL
rm(list = c("table_conv"))
bed_u = DB[DB$Class_code == "u", c("Chr", "Start", "End")]
bed_u = DB[DB$Class_code == "u", c("Chr", "Start", "End")]
bed_u = bed_u[order(bed_u$Chr, bed_u$Start),]
bed_x = DB[DB$Class_code == "x", c("Chr", "Start", "End")]
bed_x = bed_x[order(bed_x$Chr, bed_x$Start),]
bed_i = DB[DB$Class_code == "i", c("Chr", "Start", "End")]
bed_i = bed_i[order(bed_i$Chr, bed_i$Start),]
bed_o_e = DB[DB$Class_code == "o" | DB$Class_code == "e", c("Chr", "Start", "End")]
bed_o_e = bed_o_e[order(bed_o_e$Chr, bed_o_e$Start),]
bed_genes = Genes[,c("Chr", "Start", "End")]
bed_genes = bed_genes[order(bed_genes$Chr, bed_genes$Start),]
Tab_u = genomicDensity(bed_u, window.size = 250000, count_by = "number")
colnames(Tab_u)[colnames(Tab_u) == "value"] = "u"
Tab_x = genomicDensity(bed_x, window.size = 250000, count_by = "number")
colnames(Tab_x)[colnames(Tab_x) == "value"] = "x"
Tab_i = genomicDensity(bed_i, window.size = 250000, count_by = "number")
colnames(Tab_i)[colnames(Tab_i) == "value"] = "i"
Tab_o_e = genomicDensity(bed_o_e, window.size = 250000, count_by = "number")
colnames(Tab_o_e)[colnames(Tab_o_e) == "value"] = "o/e"
Tab_genes = genomicDensity(bed_genes, window.size = 250000, count_by = "number")
colnames(Tab_genes)[colnames(Tab_genes) == "value"] = "pc"
Tab_number_wide = merge(Tab_u, Tab_x, by = c("chr", "start", "end"), all = T)
Tab_number_wide = merge(Tab_number_wide, Tab_i, by = c("chr", "start", "end"), all = T)
Tab_number_wide = merge(Tab_number_wide, Tab_o_e, by = c("chr", "start", "end"), all = T)
Tab_number_wide = merge(Tab_number_wide, Tab_genes, by = c("chr", "start", "end"), all = T)
Tab_number_wide[is.na(Tab_number_wide)] = 0
colnames(Tab_number_wide) = c("Chr", "Start", "End", "Number_transcripts.u", "Number_transcripts.x", "Number_transcripts.i", "Number_transcripts.o/e", "Number_transcripts.pc")
write.table(Tab_number_wide, paste0(WD, "/", spe, "-ALL-Number-250Kb.tsv"), col.names = T, sep = "\t", row.names = F, quote = F)
rm(list = c("Tab_u", "Tab_x", "Tab_i", "Tab_o_e", "Tab_genes"))
###### 4.1.3  Create a figure representing the gene density as the number of transcripts found in 250Kb size windows.
## Figure (NUMBER): Number of transcripts in the window.
png(filename = paste0(WD, "/", spe, "-ALL-Number-250Kb.png"), height = 8000, width = 8000, res = 800)
circos.genomicInitialize(chrs.sizes, plotType = NULL)
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
chr = CELL_META$sector.index
xlim = CELL_META$xlim
ylim = CELL_META$ylim
circos.axis(h = 1, major.at = seq(0, xlim[2] + 5000000, 5000000), labels = as.character(seq(0, xlim[2], 5000000)/1000000), labels.cex = 1.2)
circos.rect(xlim[1], 0, xlim[2], 1, col = "#E6EDF1")
circos.text(mean(xlim), mean(ylim), chr, cex = 1.2, col = "black", facing = "inside", niceFacing = TRUE, font = 2)
}, bg.border = NA, track.height = 0.08)
if (dim(bed_u)[1] != 0) {
circos.genomicDensity(bed_u, col = c("#f1ea0e"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_x)[1] != 0) {
circos.genomicDensity(bed_x, col = c("#f29e0b"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_i)[1] != 0) {
circos.genomicDensity(bed_i, col = c("#f1280d"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_o_e)[1] != 0) {
circos.genomicDensity(bed_o_e, col = c("#177300"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_genes)[1] != 0) {
circos.genomicDensity(bed_genes, col = c("#19bde2"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
circos.clear()
invisible(dev.off())
rm(list = c("bed_u", "bed_x", "bed_i", "bed_o_e", "bed_genes", "Tab_number_wide"))
confidence = "Low"
bed_u = DB[DB$Class_code == "u" & DB$Significance_level == confidence, c("Chr", "Start", "End")]
bed_u = bed_u[order(bed_u$Chr, bed_u$Start),]
bed_x = DB[DB$Class_code == "x" & DB$Significance_level == confidence, c("Chr", "Start", "End")]
bed_x = bed_x[order(bed_x$Chr, bed_x$Start),]
bed_i = DB[DB$Class_code == "i" & DB$Significance_level == confidence, c("Chr", "Start", "End")]
bed_i = bed_i[order(bed_i$Chr, bed_i$Start),]
bed_o_e = DB[(DB$Class_code == "o" | DB$Class_code == "e") & DB$Significance_level == confidence, c("Chr", "Start", "End")]
bed_o_e = bed_o_e[order(bed_o_e$Chr, bed_o_e$Start),]
bed_genes = Genes[, c("Chr", "Start", "End")]
bed_genes = bed_genes[order(bed_genes$Chr, bed_genes$Start),]
View(DB)
bed_u = DB[DB$Class_code == "u" & DB$Confidence_level == confidence, c("Chr", "Start", "End")]
bed_u = bed_u[order(bed_u$Chr, bed_u$Start),]
bed_x = DB[DB$Class_code == "x" & DB$Confidence_level == confidence, c("Chr", "Start", "End")]
bed_x = bed_x[order(bed_x$Chr, bed_x$Start),]
bed_i = DB[DB$Class_code == "i" & DB$Confidence_level == confidence, c("Chr", "Start", "End")]
bed_i = bed_i[order(bed_i$Chr, bed_i$Start),]
bed_o_e = DB[(DB$Class_code == "o" | DB$Class_code == "e") & DB$Confidence_level == confidence, c("Chr", "Start", "End")]
bed_o_e = bed_o_e[order(bed_o_e$Chr, bed_o_e$Start),]
bed_genes = Genes[, c("Chr", "Start", "End")]
bed_genes = bed_genes[order(bed_genes$Chr, bed_genes$Start),]
###### 4.1.2  Create a table representing the gene density as the number of transcripts found in 250Kb size windows.
Tab_u = genomicDensity(bed_u, window.size = 250000, count_by = "number")
colnames(Tab_u)[colnames(Tab_u) == "value"] = "u"
Tab_x = genomicDensity(bed_x, window.size = 250000, count_by = "number")
colnames(Tab_x)[colnames(Tab_x) == "value"] = "x"
Tab_i = genomicDensity(bed_i, window.size = 250000, count_by = "number")
colnames(Tab_i)[colnames(Tab_i) == "value"] = "i"
Tab_o_e = genomicDensity(bed_o_e, window.size = 250000, count_by = "number")
colnames(Tab_o_e)[colnames(Tab_o_e) == "value"] = "o/e"
Tab_genes = genomicDensity(bed_genes, window.size = 250000, count_by = "number")
colnames(Tab_genes)[colnames(Tab_genes) == "value"] = "pc"
Tab_number_wide = merge(Tab_u, Tab_x, by = c("chr", "start", "end"), all = T)
Tab_number_wide = merge(Tab_number_wide, Tab_i, by = c("chr", "start", "end"), all = T)
Tab_number_wide = merge(Tab_number_wide, Tab_o_e, by = c("chr", "start", "end"), all = T)
Tab_number_wide = merge(Tab_number_wide, Tab_genes, by = c("chr", "start", "end"), all = T)
Tab_number_wide[is.na(Tab_number_wide)] = 0
colnames(Tab_number_wide) = c("Chr", "Start", "End", "Number_transcripts.u", "Number_transcripts.x", "Number_transcripts.i", "Number_transcripts.o/e", "Number_transcripts.pc")
write.table(Tab_number_wide, paste0(WD, "/", spe, "-", confidence, "-Number-250Kb.tsv"), col.names = T, sep = "\t", row.names = F, quote = F)
rm(list = c("Tab_u", "Tab_x", "Tab_i", "Tab_o_e", "Tab_genes"))
###### 4.2.3  Create a figure representing the gene density as the number of transcripts found in 250Kb size windows.
png(filename = paste0(WD, "/", spe, "-", confidence, "-Number-250Kb.png"), height = 8000, width = 8000, res = 800)
circos.genomicInitialize(chrs.sizes, plotType = NULL)
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
chr = CELL_META$sector.index
xlim = CELL_META$xlim
ylim = CELL_META$ylim
circos.axis(h = 1, major.at = seq(0, xlim[2] + 5000000, 5000000), labels = as.character(seq(0, xlim[2], 5000000)/1000000), labels.cex = 1.2)
circos.rect(xlim[1], 0, xlim[2], 1, col = "#E6EDF1")
circos.text(mean(xlim), mean(ylim), chr, cex = 1.2, col = "black", facing = "inside", niceFacing = TRUE, font = 2)
}, bg.border = NA, track.height = 0.08)
if (dim(bed_u)[1] != 0) {
circos.genomicDensity(bed_u, col = c("#f1ea0e"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_x)[1] != 0) {
circos.genomicDensity(bed_x, col = c("#f29e0b"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_i)[1] != 0) {
circos.genomicDensity(bed_i, col = c("#f1280d"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_o_e)[1] != 0) {
circos.genomicDensity(bed_o_e, col = c("#177300"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_genes)[1] != 0) {
circos.genomicDensity(bed_genes, col = c("#19bde2"), track.height = 0.1, baseline = 0, window.size = 250000, count_by = "number")
} else {
circos.track(factors = chrs.sizes$Chr, ylim = c(0, 1), track.height = 0.1)
}
circos.clear()
invisible(dev.off())
rm(list = c("bed_u", "bed_x", "bed_i", "bed_o_e", "bed_genes", "Tab_number_wide"))
