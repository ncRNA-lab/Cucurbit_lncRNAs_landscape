}
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
Tissue.Specificity = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.5)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
Tissue.Specificity = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.2)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
Tissue.Specificity = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, c("Development", "Stress", "Tissue specificity"), fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.2)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
cat(paste0("\n\n6. VENNDIAGRAM..."))
# Load binary table summary.
Binary_tab_SUMMARY_2_filt = read.table(paste0(path_DEA, "/05-Tables_and_Figures/ALL/Binary_tables/Binary_tab-SUMMARY_2_filt.tsv"), sep = "\t", header = T, quote = "\"")
# Load tissue-specificity info.
tab_TS = read.table(path_TS, sep = "\t", header = T, quote = "\"")
tab_TS = tab_TS[tab_TS$Spe == spe,]
rownames(tab_TS) = NULL
IDs_TS = unique(tab_TS[tab_TS$TAU >= 0.8, "ID_transcript"])
View(tab_TS)
cat(paste0("\n\n6. VENNDIAGRAM..."))
# Load binary table summary.
Binary_tab_SUMMARY_2_filt = read.table(paste0(path_DEA, "/05-Tables_and_Figures/ALL/Binary_tables/Binary_tab-SUMMARY_2_filt.tsv"), sep = "\t", header = T, quote = "\"")
# Load tissue-specificity info.
tab_TS = read.table(path_TS, sep = "\t", header = T, quote = "\"")
tab_TS = tab_TS[tab_TS$Spe == spe,]
rownames(tab_TS) = NULL
IDs_TS = unique(tab_TS[tab_TS$TAU >= 0.8, "ID_transcript"])
# Load positional conservation table.
tab_pos = read.table(path_PosCon, sep = "\t", header = T, quote = "\"")
tab_pos = tab_pos[tab_pos$Specie == spe & tab_pos$Class != "ALL" & tab_pos$Strictness == "ORIGINAL" & tab_pos$NonMatch == "no", c("Member", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos$ID_transcript = sapply(strsplit(tab_pos$Member, "-"), `[`, 1)
tab_pos = tab_pos[, c("ID_transcript", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos[tab_pos == "Low-conserved"] = "2 or 3 species"
tab_pos[tab_pos == "Medium-conserved"] = "4-6 species"
tab_pos[tab_pos == "High-conserved"] = "7-9 species"
rownames(tab_pos) = NULL
# Join tables.
tab_joined = merge(Binary_tab_SUMMARY_2_filt[,c("ID_transcript", "Class_code", "Significance_level", "Norm.Development", "Norm.Stress")], db, by = c("ID_transcript", "Class_code", "Significance_level"), all = T)
tab_joined[is.na(tab_joined)] = 0
tab_joined$Tissue.Specificity = ifelse(tab_joined$ID_transcript %in% IDs_TS, 1, 0)
tab_joined_long = melt(setDT(tab_joined), id.vars = c("ID_transcript", "Class_code", "Significance_level"), variable.name = "Item")
tab_joined_long = as.data.frame(tab_joined_long)
tab_joined_long = merge(tab_joined_long, tab_pos, by = "ID_transcript", all = T)
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
tab_joined_long = tab_joined_long[tab_joined_long$value != 0,]
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn_filt.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
rm(list = c("Binary_tab_SUMMARY_2_filt", "tab_TS", "IDs_TS", "tab_pos", "tab_joined"))
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
Tissue.Specificity = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, c("Development", "Stress", "Tissue specificity"), fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.2)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
cat(paste0("\n\n6. VENNDIAGRAM..."))
# Load binary table summary.
Binary_tab_SUMMARY_2_filt = read.table(paste0(path_DEA, "/05-Tables_and_Figures/ALL/Binary_tables/Binary_tab-SUMMARY_2_filt.tsv"), sep = "\t", header = T, quote = "\"")
# Load tissue-specificity info.
tab_TS = read.table(path_TS, sep = "\t", header = T, quote = "\"")
tab_TS = tab_TS[tab_TS$Spe == spe,]
rownames(tab_TS) = NULL
tab_TS[tab_TS$TAU >= 0.8, "ID_transcript"]
# Load tissue-specificity info.
tab_TS = read.table(path_TS, sep = "\t", header = T, quote = "\"")
tab_TS = tab_TS[tab_TS$Spe == spe,]
rownames(tab_TS) = NULL
IDs_TS = unique(tab_TS[tab_TS$TAU >= 0.8, "ID_transcript"])
# Load positional conservation table.
tab_pos = read.table(path_PosCon, sep = "\t", header = T, quote = "\"")
tab_pos = tab_pos[tab_pos$Specie == spe & tab_pos$Class != "ALL" & tab_pos$Strictness == "ORIGINAL" & tab_pos$NonMatch == "no", c("Member", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos$ID_transcript = sapply(strsplit(tab_pos$Member, "-"), `[`, 1)
tab_pos = tab_pos[, c("ID_transcript", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos[tab_pos == "Low-conserved"] = "2 or 3 species"
tab_pos[tab_pos == "Medium-conserved"] = "4-6 species"
tab_pos[tab_pos == "High-conserved"] = "7-9 species"
rownames(tab_pos) = NULL
# Join tables.
tab_joined = merge(Binary_tab_SUMMARY_2_filt[,c("ID_transcript", "Class_code", "Significance_level", "Norm.Development", "Norm.Stress")], db, by = c("ID_transcript", "Class_code", "Significance_level"), all = T)
View(tab_joined)
View(tab_joined)
tab_joined[is.na(tab_joined)] = 0
tab_joined$Tissue.Specificity = ifelse(tab_joined$ID_transcript %in% IDs_TS, 1, 0)
tab_joined_long = melt(setDT(tab_joined), id.vars = c("ID_transcript", "Class_code", "Significance_level"), variable.name = "Item")
tab_joined_long = as.data.frame(tab_joined_long)
tab_joined_long = merge(tab_joined_long, tab_pos, by = "ID_transcript", all = T)
View(tab_joined_long)
View(tab_joined_long)
tab_joined_long = tab_joined_long[tab_joined_long$value != 0,]
tab_joined = merge(Binary_tab_SUMMARY_2_filt[,c("ID_transcript", "Class_code", "Significance_level", "Norm.Development", "Norm.Stress")], db, by = c("ID_transcript", "Class_code", "Significance_level"), all = T)
tab_joined[is.na(tab_joined)] = 0
tab_joined$Tissue.Specificity = ifelse(tab_joined$ID_transcript %in% IDs_TS, 1, 0)
tab_joined_long = melt(setDT(tab_joined), id.vars = c("ID_transcript", "Class_code", "Significance_level"), variable.name = "Item")
tab_joined_long = as.data.frame(tab_joined_long)
tab_joined_long = merge(tab_joined_long, tab_pos, by = "ID_transcript", all = T)
tab_joined_long[tab_joined_long$Significance_level == "PC genes",]
tab_joined_long[tab_joined_long$Significance_level == "PC genes" & tab_joined_long$Item == "Tissue.Specificity",]
tab_joined_long = tab_joined_long[tab_joined_long$value != 0,]
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
Tissue.Specificity = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.2)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
`Tissue specificity` = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.2)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
path_DEA = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/16-DEA/csa"
path_db_lnc = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/05-predict_lncRNAs/csa/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"
path_db_PCG = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/05-predict_lncRNAs/csa/STEP-FINAL/Files/Genes/ORIGINAL_GENES.tsv"
path_PosCon = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/08-comparative_genomics/Positional_level/Approach_2/nr/05-Figures/TABLE_LNCRNAS_PERCENTAGE_ALL.tsv"
path_TS = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/09-Tissue-specificity/approach_1/ALL/nr/STEP3/mean-TAU.tsv"
alpha_value = 0.05
spe = "csa"
############################################
## 0. GLOBAL DATABASE
############################################
# Por si fuera necesaria la informacion de cada uno de los transcritos acerca de
# la clase de transcrito o su nivel de confianza, procedemos a a unir la base de
# datos de los lncRNAs y de los PCGs.
cat(paste0("\n\n0-GLOBAL DATABASE..."))
# Load lncRNAs database.
db_lnc = read.table(path_db_lnc, sep = "\t", header = T, quote = "\"")
db_lnc = db_lnc[, c("ID_transcript", "Class_code", "Significance_level")]
db_lnc[db_lnc == "u"] = "lincRNAs"
db_lnc[db_lnc == "x"] = "NAT-lncRNAs"
db_lnc[db_lnc == "i"] = "int-lncRNAs"
db_lnc[db_lnc == "o"] = "SOT-lncRNAs"
db_lnc[db_lnc == "e"] = "SOT-lncRNAs"
db_lnc[db_lnc == "High"] = "HC-lncRNAs"
db_lnc[db_lnc == "Medium"] = "MC-lncRNAs"
db_lnc[db_lnc == "Low"] = "LC-lncRNAs"
# Load PCGs database.
db_PCG = read.table(path_db_PCG, sep = "\t", header = T, quote = "\"")
db_PCG$"Class_code" = "PC genes"
db_PCG$"Significance_level" = "PC genes"
db_PCG = db_PCG[, c("ID_transcript", "Class_code", "Significance_level")]
# Create global database.
db = rbind(db_lnc, db_PCG)
# Save
write.table(db, paste0(path_DEA, "/05-Tables_and_Figures/ALL/Database/Database.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
rm(list = c("db_lnc", "db_PCG"))
cat(paste0("\n\n6. VENNDIAGRAM..."))
# Load binary table summary.
Binary_tab_SUMMARY_2_filt = read.table(paste0(path_DEA, "/05-Tables_and_Figures/ALL/Binary_tables/Binary_tab-SUMMARY_2_filt.tsv"), sep = "\t", header = T, quote = "\"")
# Load tissue-specificity info.
tab_TS = read.table(path_TS, sep = "\t", header = T, quote = "\"")
tab_TS = tab_TS[tab_TS$Spe == spe,]
rownames(tab_TS) = NULL
IDs_TS = unique(tab_TS[tab_TS$TAU >= 0.8, "ID_transcript"])
# Load positional conservation table.
tab_pos = read.table(path_PosCon, sep = "\t", header = T, quote = "\"")
tab_pos = tab_pos[tab_pos$Specie == spe & tab_pos$Class != "ALL" & tab_pos$Strictness == "ORIGINAL" & tab_pos$NonMatch == "no", c("Member", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos$ID_transcript = sapply(strsplit(tab_pos$Member, "-"), `[`, 1)
tab_pos = tab_pos[, c("ID_transcript", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos[tab_pos == "Low-conserved"] = "2 or 3 species"
tab_pos[tab_pos == "Medium-conserved"] = "4-6 species"
tab_pos[tab_pos == "High-conserved"] = "7-9 species"
rownames(tab_pos) = NULL
# Join tables.
tab_joined = merge(Binary_tab_SUMMARY_2_filt[,c("ID_transcript", "Class_code", "Significance_level", "Norm.Development", "Norm.Stress")], db, by = c("ID_transcript", "Class_code", "Significance_level"), all = T)
tab_joined[is.na(tab_joined)] = 0
tab_joined$Tissue.Specificity = ifelse(tab_joined$ID_transcript %in% IDs_TS, 1, 0)
tab_joined_long = melt(setDT(tab_joined), id.vars = c("ID_transcript", "Class_code", "Significance_level"), variable.name = "Item")
tab_joined_long = as.data.frame(tab_joined_long)
tab_joined_long = merge(tab_joined_long, tab_pos, by = "ID_transcript", all = T)
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
tab_joined_long = tab_joined_long[tab_joined_long$value != 0,]
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn_filt.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
rm(list = c("Binary_tab_SUMMARY_2_filt", "tab_TS", "IDs_TS", "tab_pos", "tab_joined"))
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
`Tissue specificity` = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.2)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
cat(paste0("\n\n6. VENNDIAGRAM..."))
# Load binary table summary.
Binary_tab_SUMMARY_2_filt = read.table(paste0(path_DEA, "/05-Tables_and_Figures/ALL/Binary_tables/Binary_tab-SUMMARY_2_filt.tsv"), sep = "\t", header = T, quote = "\"")
# Load tissue-specificity info.
tab_TS = read.table(path_TS, sep = "\t", header = T, quote = "\"")
tab_TS = tab_TS[tab_TS$Spe == spe,]
rownames(tab_TS) = NULL
IDs_TS = unique(tab_TS[tab_TS$TAU >= 0.8, "ID_transcript"])
# Load positional conservation table.
tab_pos = read.table(path_PosCon, sep = "\t", header = T, quote = "\"")
tab_pos = tab_pos[tab_pos$Specie == spe & tab_pos$Class != "ALL" & tab_pos$Strictness == "ORIGINAL" & tab_pos$NonMatch == "no", c("Member", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos$ID_transcript = sapply(strsplit(tab_pos$Member, "-"), `[`, 1)
tab_pos = tab_pos[, c("ID_transcript", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos[tab_pos == "Low-conserved"] = "2 or 3 species"
tab_pos[tab_pos == "Medium-conserved"] = "4-6 species"
tab_pos[tab_pos == "High-conserved"] = "7-9 species"
rownames(tab_pos) = NULL
# Join tables.
tab_joined = merge(Binary_tab_SUMMARY_2_filt[,c("ID_transcript", "Class_code", "Significance_level", "Norm.Development", "Norm.Stress")], db, by = c("ID_transcript", "Class_code", "Significance_level"), all = T)
tab_joined[is.na(tab_joined)] = 0
tab_joined$Tissue.Specificity = ifelse(tab_joined$ID_transcript %in% IDs_TS, 1, 0)
tab_joined_long = melt(setDT(tab_joined), id.vars = c("ID_transcript", "Class_code", "Significance_level"), variable.name = "Item")
tab_joined_long = as.data.frame(tab_joined_long)
tab_joined_long = merge(tab_joined_long, tab_pos, by = "ID_transcript", all = T)
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
tab_joined_long = tab_joined_long[tab_joined_long$value != 0,]
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn_filt.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
rm(list = c("Binary_tab_SUMMARY_2_filt", "tab_TS", "IDs_TS", "tab_pos", "tab_joined"))
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
`Tissue specificity` = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.2)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
path_DEA = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/16-DEA/cla"
path_db_lnc = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/05-predict_lncRNAs/cla/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"
path_db_PCG = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/05-predict_lncRNAs/cla/STEP-FINAL/Files/Genes/ORIGINAL_GENES.tsv"
path_PosCon = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/08-comparative_genomics/Positional_level/Approach_2/nr/05-Figures/TABLE_LNCRNAS_PERCENTAGE_ALL.tsv"
path_TS = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/09-Tissue-specificity/approach_1/ALL/nr/STEP3/mean-TAU.tsv"
alpha_value = 0.05
spe = "cla"
cat(paste0("\n\n0-GLOBAL DATABASE..."))
# Load lncRNAs database.
db_lnc = read.table(path_db_lnc, sep = "\t", header = T, quote = "\"")
db_lnc = db_lnc[, c("ID_transcript", "Class_code", "Significance_level")]
db_lnc[db_lnc == "u"] = "lincRNAs"
db_lnc[db_lnc == "x"] = "NAT-lncRNAs"
db_lnc[db_lnc == "i"] = "int-lncRNAs"
db_lnc[db_lnc == "o"] = "SOT-lncRNAs"
db_lnc[db_lnc == "e"] = "SOT-lncRNAs"
db_lnc[db_lnc == "High"] = "HC-lncRNAs"
db_lnc[db_lnc == "Medium"] = "MC-lncRNAs"
db_lnc[db_lnc == "Low"] = "LC-lncRNAs"
# Load PCGs database.
db_PCG = read.table(path_db_PCG, sep = "\t", header = T, quote = "\"")
db_PCG$"Class_code" = "PC genes"
db_PCG$"Significance_level" = "PC genes"
db_PCG = db_PCG[, c("ID_transcript", "Class_code", "Significance_level")]
# Create global database.
db = rbind(db_lnc, db_PCG)
# Save
write.table(db, paste0(path_DEA, "/05-Tables_and_Figures/ALL/Database/Database.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
rm(list = c("db_lnc", "db_PCG"))
cat(paste0("\n\n6. VENNDIAGRAM..."))
# Load binary table summary.
Binary_tab_SUMMARY_2_filt = read.table(paste0(path_DEA, "/05-Tables_and_Figures/ALL/Binary_tables/Binary_tab-SUMMARY_2_filt.tsv"), sep = "\t", header = T, quote = "\"")
# Load tissue-specificity info.
tab_TS = read.table(path_TS, sep = "\t", header = T, quote = "\"")
tab_TS = tab_TS[tab_TS$Spe == spe,]
rownames(tab_TS) = NULL
IDs_TS = unique(tab_TS[tab_TS$TAU >= 0.8, "ID_transcript"])
# Load positional conservation table.
tab_pos = read.table(path_PosCon, sep = "\t", header = T, quote = "\"")
tab_pos = tab_pos[tab_pos$Specie == spe & tab_pos$Class != "ALL" & tab_pos$Strictness == "ORIGINAL" & tab_pos$NonMatch == "no", c("Member", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos$ID_transcript = sapply(strsplit(tab_pos$Member, "-"), `[`, 1)
tab_pos = tab_pos[, c("ID_transcript", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos[tab_pos == "Low-conserved"] = "2 or 3 species"
tab_pos[tab_pos == "Medium-conserved"] = "4-6 species"
tab_pos[tab_pos == "High-conserved"] = "7-9 species"
rownames(tab_pos) = NULL
# Join tables.
tab_joined = merge(Binary_tab_SUMMARY_2_filt[,c("ID_transcript", "Class_code", "Significance_level", "Norm.Development", "Norm.Stress")], db, by = c("ID_transcript", "Class_code", "Significance_level"), all = T)
tab_joined[is.na(tab_joined)] = 0
tab_joined$Tissue.Specificity = ifelse(tab_joined$ID_transcript %in% IDs_TS, 1, 0)
tab_joined_long = melt(setDT(tab_joined), id.vars = c("ID_transcript", "Class_code", "Significance_level"), variable.name = "Item")
tab_joined_long = as.data.frame(tab_joined_long)
tab_joined_long = merge(tab_joined_long, tab_pos, by = "ID_transcript", all = T)
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
tab_joined_long = tab_joined_long[tab_joined_long$value != 0,]
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn_filt.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
rm(list = c("Binary_tab_SUMMARY_2_filt", "tab_TS", "IDs_TS", "tab_pos", "tab_joined"))
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
`Tissue specificity` = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.2)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
path_DEA = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/16-DEA/cme"
path_db_lnc = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/05-predict_lncRNAs/cme/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"
path_db_PCG = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/05-predict_lncRNAs/cme/STEP-FINAL/Files/Genes/ORIGINAL_GENES.tsv"
path_PosCon = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/08-comparative_genomics/Positional_level/Approach_2/nr/05-Figures/TABLE_LNCRNAS_PERCENTAGE_ALL.tsv"
path_TS = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/09-Tissue-specificity/approach_1/ALL/nr/STEP3/mean-TAU.tsv"
alpha_value = 0.05
spe = "cme"
cat(paste0("\n\n0-GLOBAL DATABASE..."))
# Load lncRNAs database.
db_lnc = read.table(path_db_lnc, sep = "\t", header = T, quote = "\"")
db_lnc = db_lnc[, c("ID_transcript", "Class_code", "Significance_level")]
db_lnc[db_lnc == "u"] = "lincRNAs"
db_lnc[db_lnc == "x"] = "NAT-lncRNAs"
db_lnc[db_lnc == "i"] = "int-lncRNAs"
db_lnc[db_lnc == "o"] = "SOT-lncRNAs"
db_lnc[db_lnc == "e"] = "SOT-lncRNAs"
db_lnc[db_lnc == "High"] = "HC-lncRNAs"
db_lnc[db_lnc == "Medium"] = "MC-lncRNAs"
db_lnc[db_lnc == "Low"] = "LC-lncRNAs"
# Load PCGs database.
db_PCG = read.table(path_db_PCG, sep = "\t", header = T, quote = "\"")
db_PCG$"Class_code" = "PC genes"
db_PCG$"Significance_level" = "PC genes"
db_PCG = db_PCG[, c("ID_transcript", "Class_code", "Significance_level")]
# Create global database.
db = rbind(db_lnc, db_PCG)
# Save
write.table(db, paste0(path_DEA, "/05-Tables_and_Figures/ALL/Database/Database.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
rm(list = c("db_lnc", "db_PCG"))
cat(paste0("\n\n6. VENNDIAGRAM..."))
# Load binary table summary.
Binary_tab_SUMMARY_2_filt = read.table(paste0(path_DEA, "/05-Tables_and_Figures/ALL/Binary_tables/Binary_tab-SUMMARY_2_filt.tsv"), sep = "\t", header = T, quote = "\"")
# Load tissue-specificity info.
tab_TS = read.table(path_TS, sep = "\t", header = T, quote = "\"")
tab_TS = tab_TS[tab_TS$Spe == spe,]
rownames(tab_TS) = NULL
IDs_TS = unique(tab_TS[tab_TS$TAU >= 0.8, "ID_transcript"])
# Load positional conservation table.
tab_pos = read.table(path_PosCon, sep = "\t", header = T, quote = "\"")
tab_pos = tab_pos[tab_pos$Specie == spe & tab_pos$Class != "ALL" & tab_pos$Strictness == "ORIGINAL" & tab_pos$NonMatch == "no", c("Member", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos$ID_transcript = sapply(strsplit(tab_pos$Member, "-"), `[`, 1)
tab_pos = tab_pos[, c("ID_transcript", "Type", "Conserved_level", "Number_species_by_family")]
tab_pos[tab_pos == "Low-conserved"] = "2 or 3 species"
tab_pos[tab_pos == "Medium-conserved"] = "4-6 species"
tab_pos[tab_pos == "High-conserved"] = "7-9 species"
rownames(tab_pos) = NULL
# Join tables.
tab_joined = merge(Binary_tab_SUMMARY_2_filt[,c("ID_transcript", "Class_code", "Significance_level", "Norm.Development", "Norm.Stress")], db, by = c("ID_transcript", "Class_code", "Significance_level"), all = T)
tab_joined[is.na(tab_joined)] = 0
tab_joined$Tissue.Specificity = ifelse(tab_joined$ID_transcript %in% IDs_TS, 1, 0)
tab_joined_long = melt(setDT(tab_joined), id.vars = c("ID_transcript", "Class_code", "Significance_level"), variable.name = "Item")
tab_joined_long = as.data.frame(tab_joined_long)
tab_joined_long = merge(tab_joined_long, tab_pos, by = "ID_transcript", all = T)
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
tab_joined_long = tab_joined_long[tab_joined_long$value != 0,]
write.table(tab_joined_long, paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/TAB-Venn_filt.tsv"), sep = "\t", row.names = F, col.names = T, quote = F)
rm(list = c("Binary_tab_SUMMARY_2_filt", "tab_TS", "IDs_TS", "tab_pos", "tab_joined"))
for (sl in c("PC genes", "LC-lncRNAs", "MC-lncRNAs", "HC-lncRNAs")) {
x = list(
Development = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Development", "ID_transcript"]),
Stress = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Norm.Stress", "ID_transcript"]),
`Tissue specificity` = unique(tab_joined_long[tab_joined_long$Significance_level == sl & tab_joined_long$Item == "Tissue.Specificity", "ID_transcript"])
)
ggvenn(x, fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF"), stroke_size = 0.5, set_name_size = 5, text_size = 4.2)
ggsave(paste0(path_DEA, "/05-Tables_and_Figures/ALL/VennDiagram/Venn-", gsub(" ", "-", sl), ".png"), height = 6, width = 6, dpi = 800, bg = "white")
}
rm(list = c("sl", "co", "x", "db", "tab_joined_long"))
path_DEA = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/16-DEA/cla"
path_annot = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/05-predict_lncRNAs/cla/STEP-FINAL/Files/Joined/ALL/nr"
path_quant = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/06-quantification/cla/Salmon/ALL/nr/03-Quant"
alpha_value = 0.05
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(stringr))
suppressMessages(library(tximport))
suppressMessages(library(GenomicFeatures))
suppressMessages(library(DESeq2))
suppressMessages(library(plotly))
suppressMessages(library(htmltools))
suppressMessages(library(pheatmap))
suppressMessages(library(RColorBrewer))
suppressMessages(library(tibble))
# devtools::install_github("azhu513/apeglm")
suppressMessages(library(scales))
suppressMessages(library(ggExtra))
options(bitmapType='cairo')
cat(paste0("DEA..."))
if (!dir.exists(paste0(path_DEA, "/04-DEA"))){
dir.create(paste0(path_DEA, "/04-DEA"))
}
# Experiments.
Experiments = gsub(".tsv", "", list.files(paste0(path_DEA, "/03-Metadata_DEA"), pattern = "[0-9].tsv"))
Experiments
experiment = "SRP280169_1_1"
cat(paste0("\n\nExperiment: ", experiment))
############################################
## 1. LOAD COUNTS
############################################
cat(paste0("\n\tLoad counts..."))
## Load counts tables coming from salmon using tximport.
txdb = suppressMessages(makeTxDbFromGFF(paste0(path_annot, "/ALL.gtf"), format = "gtf"))
k = keys(txdb, keytype = "GENEID")
df = suppressMessages(AnnotationDbi::select(txdb, keys = k, keytype = "GENEID", columns = columns(txdb)))
tx2gene = df[, c("TXNAME", "GENEID")]
tx2gene = tx2gene[!duplicated(tx2gene),]
metadata = read.table(paste0(path_DEA, "/03-Metadata_DEA/", experiment, ".tsv"), header = T, sep = "\t")
files = file.path(path_quant, metadata$Sample, "quant.sf")
names(files) = paste0(metadata$Sample)
txi.salmon = suppressMessages(tximport(files, type = "salmon", tx2gene = tx2gene, txIn = TRUE, txOut = TRUE, countsFromAbundance = "no"))
rm(list = c("txdb", "k", "df", "tx2gene", "files"))
############################################
## 2. CREATE THE DESEQ2 OBJECT
############################################
cat(paste0("\n\tCreate the DESeq2 object..."))
if (unique(metadata$Class) == "Development") {
ctrl = unique(metadata[metadata$Condition == "Control", "Name.2"])
conds = unique(metadata[metadata$Condition == "Stage", "Name.2"])
metadata$Name.2 = factor(metadata$Name.2, levels = c(ctrl, conds))
dds = suppressMessages(DESeqDataSetFromTximport(txi = txi.salmon, colData = metadata, design = ~Name.2))
dds$Name.2 = relevel(dds$Name.2, ref = ctrl)
}
if (unique(metadata$Class) == "Abiotic stress" | unique(metadata$Class) == "Biotic stress") {
ctrl = unique(metadata[metadata$Condition == "Control", "Name.2"])
conds = unique(metadata[metadata$Condition == "Treated", "Name.2"])
metadata$Name.2 = factor(metadata$Name.2, levels = c(ctrl, conds))
dds = suppressMessages(DESeqDataSetFromTximport(txi = txi.salmon, colData = metadata, design = ~Name.2))
dds$Name.2 = relevel(dds$Name.2, ref = ctrl)
}
rm(list = c("txi.salmon", "ctrl", "conds"))
cat(paste0("\n\tFilter counts..."))
## Filter the counts using the estimated counts loaded using tximport R package.
## Keep only PC genes or lncRNAs with at least 1 count in at least two samples
## by condition. We have decided to use this soft filter due to
##     - The low expression of lncRNAs.
##     - The independent filter: You typically don't need to pre-filter because
##       independent filtering occurs within results() to save you from multiple
##       test correction on transcripts with no power.
cat(paste0("\n\t\tNumber of transcripts pre-filtering: ", nrow(dds)))
KEEP = c()
for (name in unique(metadata$Name.2)) {
cols = metadata[metadata$Name.2 == name, "Sample"]
dt = counts(dds)[, cols]
keep = rowSums(dt > 0) >= 2
keep_name = rownames(dt)[keep]
KEEP = unique(c(KEEP, keep))
}
dds = dds[KEEP,]
cat(paste0("\n\t\tNumber of transcripts post-filtering: ", nrow(dds)))
rm(list = c("cols", "dt", "keep", "keep_name", "KEEP", "name"))
cat(paste0("\n\tDEA..."))
# Paths.
path_raw_out = paste0(path_DEA, "/04-DEA/01-DEA_raw/", experiment)
path_sig_out = paste0(path_DEA, "/04-DEA/02-DEA_sig/", experiment)
path_nosig_out = paste0(path_DEA, "/04-DEA/03-DEA_nosig/", experiment)
# Differential expression analysis.
dds = suppressMessages(DESeq(dds))
results_names = resultsNames(dds)
i = 1
results_names
results_names = resultsNames(dds)
i = 1
summary = data.frame()
contrast = "Name.2_Stage__Tetraploid__TTE.0__EL.0__S.0_vs_Control__Diploid__TTE.0__EL.0__S.0"
cat(paste0("\n\tContrast: ", i))
# Get results
res_deseq = results(dds, name = contrast, alpha = alpha_value)
resLFC = suppressMessages(lfcShrink(dds, coef = contrast, res = res_deseq))
# Add Shrunken LFC to results
final_res = na.omit(cbind(res_deseq, Shrunkenlog2FoldChange = resLFC$log2FoldChange, ShrunkenlfcSE = resLFC$lfcSE))
final_res = final_res %>%
data.frame() %>%
rownames_to_column(var = "ID_transcript")
# Extract significant differentially expressed transcripts.
final_res_sig = final_res %>%
as_tibble() %>%
dplyr::filter(padj <= alpha_value) %>%
data.frame()
# Extract non-significant differentially expressed transcripts.
final_res_nosig = final_res %>%
as_tibble() %>%
dplyr::filter(padj > alpha_value) %>%
data.frame()
data.frame(Specie = unique(metadata$Specie),
Class = unique(metadata$Class),
SRA_study = unlist(strsplit(experiment, "_"))[1],
Experiment = experiment,
n_contrast = i,
contrast = gsub("Name.2_", "", contrast),
Stress = gsub("_vs_Control", "", unlist(strsplit(gsub("Name.2_", "", contrast), "__"))[5]),
Tissue = gsub(" ", "_", unique(metadata$Tissue_info)),
Technique = unique(metadata$Technique_info),
Cultivar = unique(metadata$Cultivar_info),
Genotype = unique(metadata$Genotype_info),
n_sig = nrow(final_res_sig),
n_nosig = nrow(final_res_nosig),
n_total = nrow(final_res))
unique(metadata$Cultivar_info)
paste(unique(metadata$Cultivar_info), sep = "_")
paste0(unique(metadata$Cultivar_info), sep = "_")
paste0(unique(metadata$Cultivar_info))
paste(unique(metadata$Cultivar_info), collapse =  = "_")
paste(unique(metadata$Cultivar_info), collapse = "_")
