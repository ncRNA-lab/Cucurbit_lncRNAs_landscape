colnames(bed_u) = c("chr", "start", "end")
bed_x = DB[DB$Class_code == "x", c("Chr", "Start", "End")]
colnames(bed_x) = c("chr", "start", "end")
bed_i = DB[DB$Class_code == "i", c("Chr", "Start", "End")]
colnames(bed_i) = c("chr", "start", "end")
bed_o_e = DB[DB$Class_code == "o" | DB$Class_code == "e", c("Chr", "Start", "End")]
colnames(bed_o_e) = c("chr", "start", "end")
bed_genes = Genes[,c("Chr", "Start", "End")]
colnames(bed_genes) = c("chr", "start", "end")
png(filename = paste0(WD, "/Figures/Circos/nr/density_by_class_code-ALL.png"), height = 8000, width = 8000, res = 800)
circos.initializeWithIdeogram(chrs.sizes, plotType = c("axis", "labels"), labels.cex = 2)
if (dim(bed_u)[1] != 0) {
circos.genomicDensity(bed_u, col = c("#ece68f"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_x)[1] != 0) {
circos.genomicDensity(bed_x, col = c("#decfa9"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_i)[1] != 0) {
circos.genomicDensity(bed_i, col = c("#dcb8b8"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_o_e)[1] != 0) {
circos.genomicDensity(bed_o_e, col = c("#b5cf9b"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_genes)[1] != 0) {
circos.genomicDensity(bed_genes, col = c("#a2ded9"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.1)
}
circos.clear()
invisible(dev.off())
#### 4.2 BY CLASS CODE AND CONFIDENCE-LEVEL
bed_u_Low = DB[DB$Class_code == "u" & DB$Significance_level == "Low", c("Chr", "Start", "End")]
colnames(bed_u_Low) = c("chr", "start", "end")
bed_u_Medium = DB[DB$Class_code == "u" & DB$Significance_level == "Medium", c("Chr", "Start", "End")]
colnames(bed_u_Medium) = c("chr", "start", "end")
bed_u_High = DB[DB$Class_code == "u" & DB$Significance_level == "High", c("Chr", "Start", "End")]
colnames(bed_u_High) = c("chr", "start", "end")
bed_x_Low = DB[DB$Class_code == "x" & DB$Significance_level == "Low", c("Chr", "Start", "End")]
colnames(bed_x_Low) = c("chr", "start", "end")
bed_x_Medium = DB[DB$Class_code == "x" & DB$Significance_level == "Medium", c("Chr", "Start", "End")]
colnames(bed_x_Medium) = c("chr", "start", "end")
bed_x_High = DB[DB$Class_code == "x" & DB$Significance_level == "High", c("Chr", "Start", "End")]
colnames(bed_x_High) = c("chr", "start", "end")
bed_i_Low = DB[DB$Class_code == "i" & DB$Significance_level == "Low", c("Chr", "Start", "End")]
colnames(bed_i_Low) = c("chr", "start", "end")
bed_i_Medium = DB[DB$Class_code == "i" & DB$Significance_level == "Medium", c("Chr", "Start", "End")]
colnames(bed_i_Medium) = c("chr", "start", "end")
bed_i_High = DB[DB$Class_code == "i" & DB$Significance_level == "High", c("Chr", "Start", "End")]
colnames(bed_i_High) = c("chr", "start", "end")
bed_o_e_Low = DB[(DB$Class_code == "o" | DB$Class_code == "e") & DB$Significance_level == "Low", c("Chr", "Start", "End")]
colnames(bed_o_e_Low) = c("chr", "start", "end")
bed_o_e_Medium = DB[(DB$Class_code == "o" | DB$Class_code == "e") & DB$Significance_level == "Medium", c("Chr", "Start", "End")]
colnames(bed_o_e_Medium) = c("chr", "start", "end")
bed_o_e_High = DB[(DB$Class_code == "o" | DB$Class_code == "e") & DB$Significance_level == "High", c("Chr", "Start", "End")]
colnames(bed_o_e_High) = c("chr", "start", "end")
bed_genes = Genes[, c("Chr", "Start", "End")]
colnames(bed_genes) = c("chr", "start", "end")
png(filename = paste0(WD, "/Figures/Circos/nr/density_by_class_code-LOW.png"), height = 8000, width = 8000, res = 800)
circos.initializeWithIdeogram(chrs.sizes, plotType = c("axis", "labels"), labels.cex = 2)
if (dim(bed_u_Low)[1] != 0) {
circos.genomicDensity(bed_u_Low, col = c("#ece68f"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_x_Low)[1] != 0) {
circos.genomicDensity(bed_x_Low, col = c("#decfa9"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_i_Low)[1] != 0) {
circos.genomicDensity(bed_i_Low, col = c("#dcb8b8"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_o_e_Low)[1] != 0) {
circos.genomicDensity(bed_o_e_Low, col = c("#b5cf9b"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_genes)[1] != 0) {
circos.genomicDensity(bed_genes, col = c("#a2ded9"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
circos.clear()
invisible(dev.off())
png(filename = paste0(WD, "/Figures/Circos/nr/density_by_class_code-MEDIUM.png"), height = 8000, width = 8000, res = 800)
circos.initializeWithIdeogram(chrs.sizes, plotType = c("axis", "labels"), labels.cex = 2)
if (dim(bed_u_Medium)[1] != 0) {
circos.genomicDensity(bed_u_Medium, col = c("#ece68f"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_x_Medium)[1] != 0) {
circos.genomicDensity(bed_x_Medium, col = c("#decfa9"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_i_Medium)[1] != 0) {
circos.genomicDensity(bed_i_Medium, col = c("#dcb8b8"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_o_e_Medium)[1] != 0) {
circos.genomicDensity(bed_o_e_Medium, col = c("#b5cf9b"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_genes)[1] != 0) {
circos.genomicDensity(bed_genes, col = c("#a2ded9"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
circos.clear()
invisible(dev.off())
png(filename = paste0(WD, "/Figures/Circos/nr/density_by_class_code-HIGH.png"), height = 8000, width = 8000, res = 800)
circos.initializeWithIdeogram(chrs.sizes, plotType = c("axis", "labels"), labels.cex = 2)
if (dim(bed_u_High)[1] != 0) {
circos.genomicDensity(bed_u_High, col = c("#ece68f"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_x_High)[1] != 0) {
circos.genomicDensity(bed_x_High, col = c("#decfa9"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_i_High)[1] != 0) {
circos.genomicDensity(bed_i_High, col = c("#dcb8b8"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_o_e_High)[1] != 0) {
circos.genomicDensity(bed_o_e_High, col = c("#b5cf9b"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
if (dim(bed_genes)[1] != 0) {
circos.genomicDensity(bed_genes, col = c("#a2ded9"), track.height = 0.05, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.05)
}
circos.clear()
invisible(dev.off())
## 5. CIRCOS BY CHROMOSOME
for (chr in chrs) {
chrs.size = chrs.sizes[chrs.sizes$V1 == chr,]
bed_u = DB[DB$Class_code == "u" & DB$Chr == chr, c("Chr", "Start", "End")]
colnames(bed_u) = c("chr", "start", "end")
bed_x = DB[DB$Class_code == "x" & DB$Chr == chr, c("Chr", "Start", "End")]
colnames(bed_x) = c("chr", "start", "end")
bed_i = DB[DB$Class_code == "i" & DB$Chr == chr, c("Chr", "Start", "End")]
colnames(bed_i) = c("chr", "start", "end")
bed_o_e = DB[(DB$Class_code == "o" | DB$Class_code == "e")& DB$Chr == chr, c("Chr", "Start", "End")]
colnames(bed_o_e) = c("chr", "start", "end")
bed_genes = Genes[, c("Chr", "Start", "End")]
colnames(bed_genes) = c("chr", "start", "end")
png(filename = paste0(WD, "/Figures/Circos/nr/density_by_class_code-", chr, ".png"), height = 8000, width = 8000, res = 800)
circos.initializeWithIdeogram(chrs.size, plotType = c("axis", "labels"), labels.cex = 2)
if (dim(bed_u)[1] != 0) {
circos.genomicDensity(bed_u, col = c("#ece68f"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.size$V1, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_x)[1] != 0) {
circos.genomicDensity(bed_x, col = c("#decfa9"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.size$V1, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_i)[1] != 0) {
circos.genomicDensity(bed_i, col = c("#dcb8b8"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.size$V1, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_o_e)[1] != 0) {
circos.genomicDensity(bed_o_e, col = c("#b5cf9b"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.size$V1, ylim = c(0, 1), track.height = 0.1)
}
if (dim(bed_genes)[1] != 0) {
circos.genomicDensity(bed_genes, col = c("#a2ded9"), track.height = 0.1, baseline = 0)
} else {
circos.track(factors = chrs.sizes$V1, ylim = c(0, 1), track.height = 0.1)
}
circos.clear()
invisible(dev.off())
}
View(chrs.sizes)
suppressMessages(library("dplyr"))
WD = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/13-saturation_plots/car"
n_batches = 20
range = 5
cat("Batch table...\n")
Batch_tab = data.frame()
for (i in 1:n_batches) {
DB = read.table(paste0(WD, "/04-Predict_lncRNAs/STEP-FINAL/Batch-", i, "/Database/Database_LncRNAs_NR.tsv"), sep = "\t", header = T, quote = "\"")
DB$"Batch" = i
DB$"Size" = i * range
DB = DB[,c("ID_transcript", "Class_code", "Significance_level", "Batch", "Size")]
colnames(DB) = c("ID_transcript", "Class_code", "Confidence_level", "Batch", "Size")
DB[DB == "u"] = "intergenic (u)"
DB[DB == "x"] = "antisense (x)"
DB[DB == "i"] = "intronic (i)"
DB[DB == "o"] = "sense (o/e)"
DB[DB == "e"] = "sense (o/e)"
Batch_tab = rbind(Batch_tab, DB)
}
n_batches = 2
cat("Batch table...\n")
Batch_tab = data.frame()
for (i in 1:n_batches) {
DB = read.table(paste0(WD, "/04-Predict_lncRNAs/STEP-FINAL/Batch-", i, "/Database/Database_LncRNAs_NR.tsv"), sep = "\t", header = T, quote = "\"")
DB$"Batch" = i
DB$"Size" = i * range
DB = DB[,c("ID_transcript", "Class_code", "Significance_level", "Batch", "Size")]
colnames(DB) = c("ID_transcript", "Class_code", "Confidence_level", "Batch", "Size")
DB[DB == "u"] = "intergenic (u)"
DB[DB == "x"] = "antisense (x)"
DB[DB == "i"] = "intronic (i)"
DB[DB == "o"] = "sense (o/e)"
DB[DB == "e"] = "sense (o/e)"
Batch_tab = rbind(Batch_tab, DB)
}
Batch_tab$Class_code = factor(Batch_tab$Class_code, levels = c("intergenic (u)", "antisense (x)", "intronic (i)", "sense (o/e)"))
Batch_tab$Confidence_level = factor(Batch_tab$Confidence_level, levels = c("Low", "Medium", "High"))
View(Batch_tab)
cat("FINAL Batch table 1...\n")
Batch_tab_FINAL_1 = Batch_tab %>% group_by(Batch, Size, Confidence_level, Class_code, .drop=FALSE) %>% summarise(Counts = n_distinct(ID_transcript))
suppressMessages(library("Cairo"))
suppressMessages(options(bitmapType='cairo'))
suppressMessages(library("ggplot2"))
suppressMessages(library("dplyr"))
Batch_tab_FINAL_1 = Batch_tab %>% group_by(Batch, Size, Confidence_level, Class_code, .drop=FALSE) %>% summarise(Counts = n_distinct(ID_transcript))
Batch_tab_FINAL_1 = as.data.frame(Batch_tab_FINAL_1)
Batch_tab_FINAL_1 = Batch_tab_FINAL_1[order(Batch_tab_FINAL_1$Batch),]
Batch_tab_FINAL_2 = Batch_tab %>% group_by(Batch, Size, Class_code, .drop=FALSE) %>% summarise(Counts = n_distinct(ID_transcript))
Batch_tab_FINAL_2 = as.data.frame(Batch_tab_FINAL_2)
Batch_tab_FINAL_2 = Batch_tab_FINAL_2[order(Batch_tab_FINAL_2$Batch),]
View(Batch_tab_FINAL_1)
View(Batch_tab_FINAL_2)
rm(list = c("DB", "i"))
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts))
a=c(1:5)
b=c(5,3,4,5,5)
c=c(4,5,4,3,1)
# Make a basic graph
plot( b~a , type="b" , bty="l" , xlab="value of a" , ylab="value of b" , col=rgb(0.2,0.4,0.1,0.7) , lwd=3 , pch=17 , ylim=c(1,5) )
lines(c ~a , col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
# Make a basic graph
plot( b~a , type="b" , bty="l" , xlab="value of a" , ylab="value of b" , col=rgb(0.2,0.4,0.1,0.7) , lwd=3 , pch=17 , ylim=c(1,5) )
lines(c ~a , col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type="b" )
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level)
scale_color_manual(values = c("#80c0e5", "#e2e89d", "#baf4b4", "#eeb8a1")) +
xlab("") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level)
scale_color_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
xlab("") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(axis.text.x = element_text(vjust = 0.5, hjust=0.5)) +
theme(legend.position = "none")
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, fill = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level)
scale_fill_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
xlab("") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(axis.text.x = element_text(vjust = 0.5, hjust=0.5)) +
theme(legend.position = "none")
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level) +
scale_fill_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
xlab("") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(axis.text.x = element_text(vjust = 0.5, hjust=0.5)) +
theme(legend.position = "none")
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level) +
scale_fill_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
xlab("") +
ylab("Number of LncRNAs") +
theme_bw()
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level) +
scale_fill_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
xlab("") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(legend.position = "none")
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level) +
scale_fill_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
xlab("Number of samples") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(legend.position = "none")
cat("Figures...\n")
cat("Figure 1...\n")
gg = ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level) +
scale_fill_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
xlab("Number of samples") +
ylab("Number of LncRNAs") +
theme_bw()
ggsave(paste0(WD, "/05-Saturation_curve/Saturation_curve_1.png"), height = 7, width = 14, dpi = 600)
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level) +
scale_fill_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
scale_x_continuous(breaks = seq(range,range*n_batches,range)) +
xlab("Number of samples") +
ylab("Number of LncRNAs") +
theme_bw()
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level) +
scale_fill_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
scale_x_continuous(breaks = seq(range,range*n_batches,range)) +
xlab("Number of samples") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(legend.position = "bottom")
ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level) +
scale_color_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
scale_x_continuous(breaks = seq(range,range*n_batches,range)) +
xlab("Number of samples") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(legend.position = "bottom")
gg2 = ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
scale_color_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
scale_x_continuous(breaks = seq(range,range*n_batches,range)) +
xlab("Number of samples") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(legend.position = "bottom")
ggsave(paste0(WD, "/05-Saturation_curve/Saturation_curve_2.png"), height = 6, width = 6, dpi = 600)
gg2 = ggplot(Batch_tab_FINAL_2, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
scale_color_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
scale_x_continuous(breaks = seq(range,range*n_batches,range)) +
xlab("Number of samples") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(legend.position = "bottom")
ggsave(paste0(WD, "/05-Saturation_curve/Saturation_curve_2.png"), height = 6, width = 6, dpi = 600)
integer("5")
as.integer("5")
suppressMessages(library("ggplot2"))
suppressMessages(library("dplyr"))
WD = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/13-saturation_plots/cme"
WD = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/13-saturation_plots/cme"
n_batches = 77
range = 5
Batch_tab_FINAL_1 = read.table(Batch_tab_FINAL_1, paste0(WD, "/05-Saturation_curve/Batch_tab_FINAL_1.tsv"), sep = "\t", header = T, quote = "\"")
Batch_tab_FINAL_1 = read.table(paste0(WD, "/05-Saturation_curve/Batch_tab_FINAL_1.tsv"), sep = "\t", header = T, quote = "\"")
Batch_tab_FINAL_1$Class_code = factor(Batch_tab_FINAL_1$Class_code, levels = c("intergenic (u)", "antisense (x)", "intronic (i)", "sense (o/e)"))
Batch_tab_FINAL_1$Confidence_level = factor(Batch_tab_FINAL_1$Confidence_level, levels = c("Low", "Medium", "High"))
seq(range,range*n_batches,range)
gg1 = ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(. ~ Confidence_level, scales = 'free') +
scale_color_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
scale_x_continuous(breaks = seq(range,range*n_batches,range)) +
xlab("Number of samples") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(legend.position = "bottom")
ggsave(paste0(WD, "/05-Saturation_curve/Saturation_curve_1.png"), height = 6, width = 20, dpi = 600)
cat("\nFigure 1...\n")
gg1 = ggplot(Batch_tab_FINAL_1, aes(x = Size, y = Counts, color = Class_code)) +
geom_point() +
geom_line() +
facet_grid(Confidence_level ~ ., scales = 'free') +
scale_color_manual(values = c("#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b")) +
scale_x_continuous(breaks = seq(range,range*n_batches,range)) +
xlab("Number of samples") +
ylab("Number of LncRNAs") +
theme_bw() +
theme(legend.position = "bottom")
ggsave(paste0(WD, "/05-Saturation_curve/Saturation_curve_1.png"), height = 10, width = 10, dpi = 600)
WD3 = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/13-saturation_plots/cme/Tables"
WD3 = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/13-saturation_plots/car/Tables"
range = 5
permutations = 4
cat("TABLES...\n")
cat("\nMean permutations: FINAL Batch table 1...\n")
Batch_tab_FINAL_1_ALL = data.frame()
for (permutation in 1:permutations) {
Batch_tab_FINAL_1 = read.table(paste0(WD3, "/Batch_tab_FINAL_1-", range, "-", permutation, ".tsv"), sep = "\t", header = T, quote = "\"")
Batch_tab_FINAL_1_ALL = rbind(Batch_tab_FINAL_1_ALL, Batch_tab_FINAL_1)
}
range = 2
Batch_tab_FINAL_1_ALL = data.frame()
for (permutation in 1:permutations) {
Batch_tab_FINAL_1 = read.table(paste0(WD3, "/Batch_tab_FINAL_1-", range, "-", permutation, ".tsv"), sep = "\t", header = T, quote = "\"")
Batch_tab_FINAL_1_ALL = rbind(Batch_tab_FINAL_1_ALL, Batch_tab_FINAL_1)
}
rm(list = c("Batch_tab_FINAL_1", "permutation"))
View(Batch_tab_FINAL_1_ALL)
Batch_tab_FINAL_1_ALL$Class_code = factor(Batch_tab_FINAL_1_ALL$Class_code, levels = c("intergenic (u)", "antisense (x)", "intronic (i)", "sense (o/e)"))
Batch_tab_FINAL_1_ALL$Confidence_level = factor(Batch_tab_FINAL_1_ALL$Confidence_level, levels = c("Low", "Medium", "High"))
Batch_tab_FINAL_1_RED = Batch_tab_FINAL_1_ALL %>% group_by(Batch, Size, Confidence_level, Class_code, .drop=FALSE) %>% summarise(Mean.Counts = mean(Counts))
Batch_tab_FINAL_1_RED = as.data.frame(Batch_tab_FINAL_1_RED)
Batch_tab_FINAL_1_RED = Batch_tab_FINAL_1_RED[order(Batch_tab_FINAL_1_RED$Batch),]
Batch_tab_FINAL_1_RED = Batch_tab_FINAL_1_ALL %>% group_by(Batch, Size, Confidence_level, Class_code, .drop=FALSE) %>% summarise(Mean.Counts = mean(Counts))
suppressMessages(library("dplyr"))
Batch_tab_FINAL_1_RED = Batch_tab_FINAL_1_ALL %>% group_by(Batch, Size, Confidence_level, Class_code, .drop=FALSE) %>% summarise(Mean.Counts = mean(Counts))
Batch_tab_FINAL_1_RED = as.data.frame(Batch_tab_FINAL_1_RED)
Batch_tab_FINAL_1_RED = Batch_tab_FINAL_1_RED[order(Batch_tab_FINAL_1_RED$Batch),]
View(Batch_tab_FINAL_1_RED)
write.table(Batch_tab_FINAL_1_RED, paste0(WD3, "/Batch_tab_FINAL_1-", range, ".tsv"), sep = "\t", col.names = T, row.names = F, quote = F)
## 2. TABLES
cat("TABLES...\n")
cat("\nMean permutations: FINAL Batch table 1...\n")
Batch_tab_FINAL_1_ALL = data.frame()
for (permutation in 1:permutations) {
Batch_tab_FINAL_1 = read.table(paste0(WD3, "/Batch_tab_FINAL_1-", range, "-", permutation, ".tsv"), sep = "\t", header = T, quote = "\"")
Batch_tab_FINAL_1_ALL = rbind(Batch_tab_FINAL_1_ALL, Batch_tab_FINAL_1)
}
rm(list = c("Batch_tab_FINAL_1", "permutation"))
Batch_tab_FINAL_1_ALL$Class_code = factor(Batch_tab_FINAL_1_ALL$Class_code, levels = c("intergenic (u)", "antisense (x)", "intronic (i)", "sense (o/e)"))
Batch_tab_FINAL_1_ALL$Confidence_level = factor(Batch_tab_FINAL_1_ALL$Confidence_level, levels = c("Low", "Medium", "High"))
Batch_tab_FINAL_1_RED = Batch_tab_FINAL_1_ALL %>% group_by(Batch, Size, Confidence_level, Class_code, .drop=FALSE) %>% summarise(Mean.Counts = mean(Counts))
Batch_tab_FINAL_1_RED = as.data.frame(Batch_tab_FINAL_1_RED)
Batch_tab_FINAL_1_RED = Batch_tab_FINAL_1_RED[order(Batch_tab_FINAL_1_RED$Batch),]
write.table(Batch_tab_FINAL_1_RED, paste0(WD3, "/Batch_tab_FINAL_1-", range, ".tsv"), sep = "\t", col.names = T, row.names = F, quote = F)
cat("\nMean permutations: FINAL Batch table 2...\n")
Batch_tab_FINAL_2_ALL = data.frame()
for (permutation in 1:permutations) {
Batch_tab_FINAL_2 = read.table(paste0(WD3, "/Batch_tab_FINAL_2-", range, "-", permutation, ".tsv"), sep = "\t", header = T, quote = "\"")
Batch_tab_FINAL_2_ALL = rbind(Batch_tab_FINAL_2_ALL, Batch_tab_FINAL_1)
}
rm(list = c("Batch_tab_FINAL_2", "permutation"))
Batch_tab_FINAL_2_ALL$Class_code = factor(Batch_tab_FINAL_2_ALL$Class_code, levels = c("intergenic (u)", "antisense (x)", "intronic (i)", "sense (o/e)"))
Batch_tab_FINAL_2_RED = Batch_tab_FINAL_2_ALL %>% group_by(Batch, Size, Class_code, .drop=FALSE) %>% summarise(Mean.Counts = mean(Counts))
Batch_tab_FINAL_2_RED = as.data.frame(Batch_tab_FINAL_2_RED)
Batch_tab_FINAL_2_RED = Batch_tab_FINAL_2_RED[order(Batch_tab_FINAL_2_RED$Batch),]
write.table(Batch_tab_FINAL_2_RED, paste0(WD3, "/Batch_tab_FINAL_2-", range, ".tsv"), sep = "\t", col.names = T, row.names = F, quote = F)
cat("TABLES...\n")
cat("\nMean permutations: FINAL Batch table 1...\n")
Batch_tab_FINAL_1_ALL = data.frame()
for (permutation in 1:permutations) {
Batch_tab_FINAL_1 = read.table(paste0(WD3, "/Batch_tab_FINAL_1-", range, "-", permutation, ".tsv"), sep = "\t", header = T, quote = "\"")
Batch_tab_FINAL_1_ALL = rbind(Batch_tab_FINAL_1_ALL, Batch_tab_FINAL_1)
}
rm(list = c("Batch_tab_FINAL_1", "permutation"))
Batch_tab_FINAL_1_ALL$Class_code = factor(Batch_tab_FINAL_1_ALL$Class_code, levels = c("intergenic (u)", "antisense (x)", "intronic (i)", "sense (o/e)"))
Batch_tab_FINAL_1_ALL$Confidence_level = factor(Batch_tab_FINAL_1_ALL$Confidence_level, levels = c("Low", "Medium", "High"))
Batch_tab_FINAL_1_RED = Batch_tab_FINAL_1_ALL %>% group_by(Batch, Size, Confidence_level, Class_code, .drop=FALSE) %>% summarise(Mean.Counts = mean(Counts))
Batch_tab_FINAL_1_RED = as.data.frame(Batch_tab_FINAL_1_RED)
Batch_tab_FINAL_1_RED = Batch_tab_FINAL_1_RED[order(Batch_tab_FINAL_1_RED$Batch),]
write.table(Batch_tab_FINAL_1_RED, paste0(WD3, "/Batch_tab_FINAL_1-", range, ".tsv"), sep = "\t", col.names = T, row.names = F, quote = F)
cat("\nMean permutations: FINAL Batch table 2...\n")
Batch_tab_FINAL_2_ALL = data.frame()
for (permutation in 1:permutations) {
Batch_tab_FINAL_2 = read.table(paste0(WD3, "/Batch_tab_FINAL_2-", range, "-", permutation, ".tsv"), sep = "\t", header = T, quote = "\"")
Batch_tab_FINAL_2_ALL = rbind(Batch_tab_FINAL_2_ALL, Batch_tab_FINAL_2)
}
rm(list = c("Batch_tab_FINAL_2", "permutation"))
Batch_tab_FINAL_2_ALL$Class_code = factor(Batch_tab_FINAL_2_ALL$Class_code, levels = c("intergenic (u)", "antisense (x)", "intronic (i)", "sense (o/e)"))
Batch_tab_FINAL_2_RED = Batch_tab_FINAL_2_ALL %>% group_by(Batch, Size, Class_code, .drop=FALSE) %>% summarise(Mean.Counts = mean(Counts))
Batch_tab_FINAL_2_RED = as.data.frame(Batch_tab_FINAL_2_RED)
Batch_tab_FINAL_2_RED = Batch_tab_FINAL_2_RED[order(Batch_tab_FINAL_2_RED$Batch),]
write.table(Batch_tab_FINAL_2_RED, paste0(WD3, "/Batch_tab_FINAL_2-", range, ".tsv"), sep = "\t", col.names = T, row.names = F, quote = F)
View(Batch_tab_FINAL_2_RED)
Batch_tab_1_RED = Batch_tab_FINAL_1_RED
Batch_tab_2_RED = Batch_tab_FINAL_2_RED
write.table(Batch_tab_1_RED, paste0(WD3, "/FINAL-Batch_tab_1-", range, ".tsv"), sep = "\t", col.names = T, row.names = F, quote = F)
write.table(Batch_tab_2_RED, paste0(WD3, "/FINAL-Batch_tab_2-", range, ".tsv"), sep = "\t", col.names = T, row.names = F, quote = F)
