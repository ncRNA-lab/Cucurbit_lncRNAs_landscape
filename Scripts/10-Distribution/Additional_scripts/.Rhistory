text(143, 163, z["10101"], cex = cex[3], col = counts.col[1])
text(252, 145, z["10011"], cex = cex[3], col = counts.col[1])
text(205, 255, z["01110"], cex = cex[3], col = counts.col[1])
text(254, 245, z["01101"], cex = cex[3], col = counts.col[1])
text(211, 118, z["01011"], cex = cex[3], col = counts.col[1])
text(267, 211, z["00111"], cex = cex[3], col = counts.col[1])
text(170, 231, z["11110"], cex = cex[3], col = counts.col[1])
text(158, 169, z["11101"], cex = cex[3], col = counts.col[1])
text(212, 139, z["11011"], cex = cex[3], col = counts.col[1])
text(263, 180, z["10111"], cex = cex[3], col = counts.col[1])
text(239, 232, z["01111"], cex = cex[3], col = counts.col[1])
text(204, 190, z["11111"], cex = cex[2], col = counts.col[1])
#text(400, 7, sprintf("Not in any = %i", z["00000"]), cex = cex[1], col = counts.col[1])
if (length(include) == 2) {
text(61, 217, z2["10000"], cex = cex[2], col = counts.col[2])
text(200, 318, z2["01000"], cex = cex[2], col = counts.col[2])
text(321, 234, z2["00100"], cex = cex[2], col = counts.col[2])
text(294, 70, z2["00010"], cex = cex[2], col = counts.col[2])
text(132, 58, z2["00001"], cex = cex[2], col = counts.col[2])
text(146, 241, z2["11000"], cex = cex[3], col = counts.col[2])
text(123, 177, z2["10100"], cex = cex[3], col = counts.col[2])
text(275, 141, z2["10010"], cex = cex[3], col = counts.col[2])
text(137, 140, z2["10001"], cex = cex[3], col = counts.col[2])
text(243, 257, z2["01100"], cex = cex[3], col = counts.col[2])
text(175, 256, z2["01010"], cex = cex[3], col = counts.col[2])
text(187, 107, z2["01001"], cex = cex[3], col = counts.col[2])
text(286, 183, z2["00110"], cex = cex[3], col = counts.col[2])
text(267, 227, z2["00101"], cex = cex[3], col = counts.col[2])
text(228, 94, z2["00011"], cex = cex[3], col = counts.col[2])
text(148, 200, z2["11100"], cex = cex[3], col = counts.col[2])
text(159, 246, z2["11010"], cex = cex[3], col = counts.col[2])
text(171, 134, z2["11001"], cex = cex[3], col = counts.col[2])
text(281, 168, z2["10110"], cex = cex[3], col = counts.col[2])
text(143, 152, z2["10101"], cex = cex[3], col = counts.col[2])
text(252, 134, z2["10011"], cex = cex[3], col = counts.col[2])
text(205, 244, z2["01110"], cex = cex[3], col = counts.col[2])
text(254, 239, z2["01101"], cex = cex[3], col = counts.col[2])
text(211, 109, z2["01011"], cex = cex[3], col = counts.col[2])
text(267, 204, z2["00111"], cex = cex[3], col = counts.col[2])
text(170, 220, z2["11110"], cex = cex[3], col = counts.col[2])
text(158, 159, z2["11101"], cex = cex[3], col = counts.col[2])
text(212, 130, z2["11011"], cex = cex[3], col = counts.col[2])
text(263, 169, z2["10111"], cex = cex[3], col = counts.col[2])
text(239, 225, z2["01111"], cex = cex[3], col = counts.col[2])
text(204, 179, z2["11111"], cex = cex[2], col = counts.col[2])
#text(400, -10, sprintf("Not in any = %i", z2["00000"]), cex = cex[1], col = counts.col[2])
if (show.include) {
text(10, 7, include[1], cex = cex[1], col = counts.col[1])
text(10, -10, include[2], cex = cex[1], col = counts.col[2])
}
}
invisible()
}
x = list(
`PC genes` = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$HDW.pc >= 1, "ID"]),
lincRNAs = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$HDW.u >= 1, "ID"]),
`NAT-lncRNAs` = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$HDW.x >= 1, "ID"]),
`int-lncRNAs` = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$HDW.i >= 1, "ID"]),
`SOT-lncRNAs` = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$`HDW.o/e` >= 1, "ID"])
)
A = list_to_matrix(x)
Z = vennCounts(A, include = "both")
png(filename = paste0(WD, "/", spe, "-ALL-Number-100Kb-HDWs-VENN.png"), height = 5000, width = 5000, res=600)
my.vennDiagram(Z,
include = "both",
names = NULL,
mar = rep(1,4),
cex = c(1.8,1.5,0.9),
lwd = 1,
#circle.col = c("#1e58e8", "#f4fb0f", "#c6650a", "#f90c3b", "#007810"),
circle.col = c("#a2ded9", "#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b"),
counts.col = NULL,
show.include = NULL
)
invisible(dev.off())
### FUNCTION VENN DIAGRAM
# https://gist.github.com/mevers/9c846e6293db44dd37695c46b8f2b6a2
my.vennDiagram <- function (object, include = "both", names = NULL, mar = rep(1,4),
cex = c(1.5, 1, 0.7), lwd = 1, circle.col = NULL, counts.col = NULL,
show.include = NULL, ...)
{
include <- as.character(include)
LenInc <- min(length(include), 2)
if (is(object, "VennCounts")) {
include <- include[1]
LenInc <- 1
}
else {
if (LenInc > 1)
z2 <- vennCounts(object, include = include[2])[,"Counts"]
object <- vennCounts(object, include = include[1])
}
z <- object[, "Counts"]
nsets <- ncol(object) - 1
if (nsets > 5)
stop("Can't plot Venn diagram for more than 5 sets")
VennZone <- object[, 1:nsets, drop = FALSE]
VennZone <- apply(VennZone, 1, function(x) paste(x, sep = "", collapse = ""))
names(z) <- VennZone
if (length(include) == 2)
names(z2) <- VennZone
if (is.null(names))
names <- colnames(object)[1:nsets]
FILL.COL <- TRUE
if (is.null(circle.col)) {
circle.col <- par("col")
FILL.COL <- FALSE
}
if (length(circle.col) < nsets)
circle.col <- rep(circle.col, length.out = nsets)
if (is.null(counts.col))
counts.col <- par("col")
if (length(counts.col) < LenInc)
counts.col <- rep(counts.col, length.out = LenInc)
if (is.null(show.include))
show.include <- as.logical(LenInc - 1)
old.par <- par()$mar
on.exit(par(mar = old.par))
par(mar = mar)
plot(c(-20, 420), c(-20, 420), type = "n", axes = FALSE, ylab = "", xlab = "", ...)
relocate_elp <- function(e, alpha, x, y) {
phi <- (alpha/180) * pi
xr <- e[, 1] * cos(phi) + e[, 2] * sin(phi)
yr <- -e[, 1] * sin(phi) + e[, 2] * cos(phi)
xr <- x + xr
yr <- y + yr
cbind(xr, yr)
}
#rect(-20, -30, 430, 430)
elps <- cbind(150 * cos(seq(0, 2 * pi, len = 1000)), 60 * sin(seq(0, 2 * pi, len = 1000)))
if (!FILL.COL) {
polygon(relocate_elp(elps, 378, 145, 200), border = circle.col[1], lwd = lwd)
polygon(relocate_elp(elps, 90, 200, 250), border = circle.col[2], lwd = lwd)
polygon(relocate_elp(elps, 162, 250, 220), border = circle.col[3], lwd = lwd)
polygon(relocate_elp(elps, 234, 250, 150), border = circle.col[4], lwd = lwd)
polygon(relocate_elp(elps, 306, 180, 125), border = circle.col[5], lwd = lwd)
}
if (FILL.COL) {
RGB <- col2rgb(circle.col)/255
ALPHA <- 0.25
RGB.ALP1 <- rgb(RGB[1, 1], RGB[2, 1], RGB[3, 1], alpha = ALPHA)
RGB.ALP2 <- rgb(RGB[1, 2], RGB[2, 2], RGB[3, 2], alpha = ALPHA)
RGB.ALP3 <- rgb(RGB[1, 3], RGB[2, 3], RGB[3, 3], alpha = ALPHA)
RGB.ALP4 <- rgb(RGB[1, 4], RGB[2, 4], RGB[3, 4], alpha = ALPHA)
RGB.ALP5 <- rgb(RGB[1, 5], RGB[2, 5], RGB[3, 5], alpha = ALPHA)
polygon(relocate_elp(elps, 378, 145, 200), border = circle.col[1], lwd = lwd, col = RGB.ALP1)
polygon(relocate_elp(elps, 90, 200, 250), border = circle.col[2], lwd = lwd, col = RGB.ALP2)
polygon(relocate_elp(elps, 162, 250, 220), border = circle.col[3], lwd = lwd, col = RGB.ALP3)
polygon(relocate_elp(elps, 234, 250, 150), border = circle.col[4], lwd = lwd, col = RGB.ALP4)
polygon(relocate_elp(elps, 306, 180, 125), border = circle.col[5], lwd = lwd, col = RGB.ALP5)
}
text(50, 287, names[1], cex = cex[1])
text(200, 415, names[2], cex = cex[1])
text(350, 307, names[3], cex = cex[1])
text(350, 10, names[4], cex = cex[1])
text(100, -14, names[5], cex = cex[1])
text(61, 228, z["10000"], cex = cex[2], col = counts.col[1])
text(200, 329, z["01000"], cex = cex[2], col = counts.col[1])
text(321, 245, z["00100"], cex = cex[2], col = counts.col[1])
text(294, 81, z["00010"], cex = cex[2], col = counts.col[1])
text(132, 69, z["00001"], cex = cex[2], col = counts.col[1])
text(146, 250, z["11000"], cex = cex[3], col = counts.col[1])
text(123, 188, z["10100"], cex = cex[3], col = counts.col[1])
text(275, 152, z["10010"], cex = cex[3], col = counts.col[1])
text(137, 146, z["10001"], cex = cex[3], col = counts.col[1])
text(243, 268, z["01100"], cex = cex[3], col = counts.col[1])
text(175, 267, z["01010"], cex = cex[3], col = counts.col[1])
text(187, 117, z["01001"], cex = cex[3], col = counts.col[1])
text(286, 190, z["00110"], cex = cex[3], col = counts.col[1])
text(267, 235, z["00101"], cex = cex[3], col = counts.col[1])
text(228, 105, z["00011"], cex = cex[3], col = counts.col[1])
text(148, 210, z["11100"], cex = cex[3], col = counts.col[1])
text(159, 252, z["11010"], cex = cex[3], col = counts.col[1])
text(171, 141, z["11001"], cex = cex[3], col = counts.col[1])
text(281, 175, z["10110"], cex = cex[3], col = counts.col[1])
text(143, 163, z["10101"], cex = cex[3], col = counts.col[1])
text(252, 145, z["10011"], cex = cex[3], col = counts.col[1])
text(205, 255, z["01110"], cex = cex[3], col = counts.col[1])
text(254, 245, z["01101"], cex = cex[3], col = counts.col[1])
text(211, 118, z["01011"], cex = cex[3], col = counts.col[1])
text(267, 211, z["00111"], cex = cex[3], col = counts.col[1])
text(170, 231, z["11110"], cex = cex[3], col = counts.col[1])
text(158, 169, z["11101"], cex = cex[3], col = counts.col[1])
text(212, 139, z["11011"], cex = cex[3], col = counts.col[1])
text(263, 180, z["10111"], cex = cex[3], col = counts.col[1])
text(239, 232, z["01111"], cex = cex[3], col = counts.col[1])
text(204, 190, z["11111"], cex = cex[2], col = counts.col[1])
#text(400, 7, sprintf("Not in any = %i", z["00000"]), cex = cex[1], col = counts.col[1])
if (length(include) == 2) {
text(61, 217, z2["10000"], cex = cex[2], col = counts.col[2])
text(200, 318, z2["01000"], cex = cex[2], col = counts.col[2])
text(321, 234, z2["00100"], cex = cex[2], col = counts.col[2])
text(294, 70, z2["00010"], cex = cex[2], col = counts.col[2])
text(132, 58, z2["00001"], cex = cex[2], col = counts.col[2])
text(146, 241, z2["11000"], cex = cex[3], col = counts.col[2])
text(123, 177, z2["10100"], cex = cex[3], col = counts.col[2])
text(275, 141, z2["10010"], cex = cex[3], col = counts.col[2])
text(137, 140, z2["10001"], cex = cex[3], col = counts.col[2])
text(243, 257, z2["01100"], cex = cex[3], col = counts.col[2])
text(175, 256, z2["01010"], cex = cex[3], col = counts.col[2])
text(187, 107, z2["01001"], cex = cex[3], col = counts.col[2])
text(286, 183, z2["00110"], cex = cex[3], col = counts.col[2])
text(267, 227, z2["00101"], cex = cex[3], col = counts.col[2])
text(228, 94, z2["00011"], cex = cex[3], col = counts.col[2])
text(148, 200, z2["11100"], cex = cex[3], col = counts.col[2])
text(159, 246, z2["11010"], cex = cex[3], col = counts.col[2])
text(171, 134, z2["11001"], cex = cex[3], col = counts.col[2])
text(281, 168, z2["10110"], cex = cex[3], col = counts.col[2])
text(143, 152, z2["10101"], cex = cex[3], col = counts.col[2])
text(252, 134, z2["10011"], cex = cex[3], col = counts.col[2])
text(205, 244, z2["01110"], cex = cex[3], col = counts.col[2])
text(254, 239, z2["01101"], cex = cex[3], col = counts.col[2])
text(211, 109, z2["01011"], cex = cex[3], col = counts.col[2])
text(267, 204, z2["00111"], cex = cex[3], col = counts.col[2])
text(170, 220, z2["11110"], cex = cex[3], col = counts.col[2])
text(158, 159, z2["11101"], cex = cex[3], col = counts.col[2])
text(212, 130, z2["11011"], cex = cex[3], col = counts.col[2])
text(263, 169, z2["10111"], cex = cex[3], col = counts.col[2])
text(239, 225, z2["01111"], cex = cex[3], col = counts.col[2])
text(204, 179, z2["11111"], cex = cex[2], col = counts.col[2])
#text(400, -10, sprintf("Not in any = %i", z2["00000"]), cex = cex[1], col = counts.col[2])
if (show.include) {
text(10, 7, include[1], cex = cex[1], col = counts.col[1])
text(10, -10, include[2], cex = cex[1], col = counts.col[2])
}
}
invisible()
}
x = list(
`PC genes` = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$HDW.pc >= 1, "ID"]),
lincRNAs = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$HDW.u >= 1, "ID"]),
`NAT-lncRNAs` = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$HDW.x >= 1, "ID"]),
`int-lncRNAs` = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$HDW.i >= 1, "ID"]),
`SOT-lncRNAs` = as.character(Tab_number_wide_mod_1[Tab_number_wide_mod_1$`HDW.o/e` >= 1, "ID"])
)
A = list_to_matrix(x)
Z = vennCounts(A, include = "both")
png(filename = paste0(WD, "/", spe, "-ALL-Number-100Kb-HDWs-VENN.png"), height = 5000, width = 5000, res=600)
my.vennDiagram(Z,
include = "both",
names = NULL,
mar = rep(1,4),
cex = c(1.8,1.5,0.9),
lwd = 1,
circle.col = c("#1e58e8", "#f4fb0f", "#c6650a", "#f90c3b", "#007810"),
#circle.col = c("#a2ded9", "#ece68f", "#decfa9", "#dcb8b8", "#b5cf9b"),
counts.col = NULL,
show.include = NULL
)
invisible(dev.off())
png(filename = paste0(WD, "/", spe, "-ALL-Number-100Kb-HDWs-VENN.png"), height = 5000, width = 5000, res=600)
my.vennDiagram(Z,
include = "both",
names = NULL,
mar = rep(1,4),
cex = c(1.8,1.5,0.95),
lwd = 1,
circle.col = c("#1e58e8", "#f4fb0f", "#c6650a", "#f90c3b", "#007810"),
counts.col = NULL,
show.include = NULL
)
invisible(dev.off())
spe = "csa"
lncRNAs_tab="/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/05-predict_lncRNAs/csa/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"
genes_tab="/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/05-predict_lncRNAs/csa/STEP-FINAL/Files/Genes/ORIGINAL_GENES.tsv"
WD = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/10-Distribution/Transcript_density/nr/csa"
AI = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Additional_info"
suppressMessages(library(ComplexHeatmap))
suppressMessages(library(dplyr))
suppressMessages(library(circlize))
suppressMessages(library(data.table))
suppressMessages(library(ggplot2))
suppressMessages(library(ggExtra))
suppressMessages(library(limma))
suppressMessages(options(bitmapType='cairo'))
### FUNCTION VENN DIAGRAM
# https://gist.github.com/mevers/9c846e6293db44dd37695c46b8f2b6a2
my.vennDiagram <- function (object, include = "both", names = NULL, mar = rep(1,4),
cex = c(1.5, 1, 0.7), lwd = 1, circle.col = NULL, counts.col = NULL,
show.include = NULL, ...)
{
include <- as.character(include)
LenInc <- min(length(include), 2)
if (is(object, "VennCounts")) {
include <- include[1]
LenInc <- 1
}
else {
if (LenInc > 1)
z2 <- vennCounts(object, include = include[2])[,"Counts"]
object <- vennCounts(object, include = include[1])
}
z <- object[, "Counts"]
nsets <- ncol(object) - 1
if (nsets > 5)
stop("Can't plot Venn diagram for more than 5 sets")
VennZone <- object[, 1:nsets, drop = FALSE]
VennZone <- apply(VennZone, 1, function(x) paste(x, sep = "", collapse = ""))
names(z) <- VennZone
if (length(include) == 2)
names(z2) <- VennZone
if (is.null(names))
names <- colnames(object)[1:nsets]
FILL.COL <- TRUE
if (is.null(circle.col)) {
circle.col <- par("col")
FILL.COL <- FALSE
}
if (length(circle.col) < nsets)
circle.col <- rep(circle.col, length.out = nsets)
if (is.null(counts.col))
counts.col <- par("col")
if (length(counts.col) < LenInc)
counts.col <- rep(counts.col, length.out = LenInc)
if (is.null(show.include))
show.include <- as.logical(LenInc - 1)
old.par <- par()$mar
on.exit(par(mar = old.par))
par(mar = mar)
plot(c(-20, 420), c(-20, 420), type = "n", axes = FALSE, ylab = "", xlab = "", ...)
relocate_elp <- function(e, alpha, x, y) {
phi <- (alpha/180) * pi
xr <- e[, 1] * cos(phi) + e[, 2] * sin(phi)
yr <- -e[, 1] * sin(phi) + e[, 2] * cos(phi)
xr <- x + xr
yr <- y + yr
cbind(xr, yr)
}
#rect(-20, -30, 430, 430)
elps <- cbind(150 * cos(seq(0, 2 * pi, len = 1000)), 60 * sin(seq(0, 2 * pi, len = 1000)))
if (!FILL.COL) {
polygon(relocate_elp(elps, 378, 145, 200), border = circle.col[1], lwd = lwd)
polygon(relocate_elp(elps, 90, 200, 250), border = circle.col[2], lwd = lwd)
polygon(relocate_elp(elps, 162, 250, 220), border = circle.col[3], lwd = lwd)
polygon(relocate_elp(elps, 234, 250, 150), border = circle.col[4], lwd = lwd)
polygon(relocate_elp(elps, 306, 180, 125), border = circle.col[5], lwd = lwd)
}
if (FILL.COL) {
RGB <- col2rgb(circle.col)/255
ALPHA <- 0.25
RGB.ALP1 <- rgb(RGB[1, 1], RGB[2, 1], RGB[3, 1], alpha = ALPHA)
RGB.ALP2 <- rgb(RGB[1, 2], RGB[2, 2], RGB[3, 2], alpha = ALPHA)
RGB.ALP3 <- rgb(RGB[1, 3], RGB[2, 3], RGB[3, 3], alpha = ALPHA)
RGB.ALP4 <- rgb(RGB[1, 4], RGB[2, 4], RGB[3, 4], alpha = ALPHA)
RGB.ALP5 <- rgb(RGB[1, 5], RGB[2, 5], RGB[3, 5], alpha = ALPHA)
polygon(relocate_elp(elps, 378, 145, 200), border = circle.col[1], lwd = lwd, col = RGB.ALP1)
polygon(relocate_elp(elps, 90, 200, 250), border = circle.col[2], lwd = lwd, col = RGB.ALP2)
polygon(relocate_elp(elps, 162, 250, 220), border = circle.col[3], lwd = lwd, col = RGB.ALP3)
polygon(relocate_elp(elps, 234, 250, 150), border = circle.col[4], lwd = lwd, col = RGB.ALP4)
polygon(relocate_elp(elps, 306, 180, 125), border = circle.col[5], lwd = lwd, col = RGB.ALP5)
}
text(50, 287, names[1], cex = cex[1])
text(200, 415, names[2], cex = cex[1])
text(350, 307, names[3], cex = cex[1])
text(350, 10, names[4], cex = cex[1])
text(100, -14, names[5], cex = cex[1])
text(61, 228, z["10000"], cex = cex[2], col = counts.col[1])
text(200, 329, z["01000"], cex = cex[2], col = counts.col[1])
text(321, 245, z["00100"], cex = cex[2], col = counts.col[1])
text(294, 81, z["00010"], cex = cex[2], col = counts.col[1])
text(132, 69, z["00001"], cex = cex[2], col = counts.col[1])
text(146, 250, z["11000"], cex = cex[3], col = counts.col[1])
text(123, 188, z["10100"], cex = cex[3], col = counts.col[1])
text(275, 152, z["10010"], cex = cex[3], col = counts.col[1])
text(137, 146, z["10001"], cex = cex[3], col = counts.col[1])
text(243, 268, z["01100"], cex = cex[3], col = counts.col[1])
text(175, 267, z["01010"], cex = cex[3], col = counts.col[1])
text(187, 117, z["01001"], cex = cex[3], col = counts.col[1])
text(286, 190, z["00110"], cex = cex[3], col = counts.col[1])
text(267, 235, z["00101"], cex = cex[3], col = counts.col[1])
text(228, 105, z["00011"], cex = cex[3], col = counts.col[1])
text(148, 210, z["11100"], cex = cex[3], col = counts.col[1])
text(159, 252, z["11010"], cex = cex[3], col = counts.col[1])
text(171, 141, z["11001"], cex = cex[3], col = counts.col[1])
text(281, 175, z["10110"], cex = cex[3], col = counts.col[1])
text(143, 163, z["10101"], cex = cex[3], col = counts.col[1])
text(252, 145, z["10011"], cex = cex[3], col = counts.col[1])
text(205, 255, z["01110"], cex = cex[3], col = counts.col[1])
text(254, 245, z["01101"], cex = cex[3], col = counts.col[1])
text(211, 118, z["01011"], cex = cex[3], col = counts.col[1])
text(267, 211, z["00111"], cex = cex[3], col = counts.col[1])
text(170, 231, z["11110"], cex = cex[3], col = counts.col[1])
text(158, 169, z["11101"], cex = cex[3], col = counts.col[1])
text(212, 139, z["11011"], cex = cex[3], col = counts.col[1])
text(263, 180, z["10111"], cex = cex[3], col = counts.col[1])
text(239, 232, z["01111"], cex = cex[3], col = counts.col[1])
text(204, 190, z["11111"], cex = cex[2], col = counts.col[1])
#text(400, 7, sprintf("Not in any = %i", z["00000"]), cex = cex[1], col = counts.col[1])
if (length(include) == 2) {
text(61, 217, z2["10000"], cex = cex[2], col = counts.col[2])
text(200, 318, z2["01000"], cex = cex[2], col = counts.col[2])
text(321, 234, z2["00100"], cex = cex[2], col = counts.col[2])
text(294, 70, z2["00010"], cex = cex[2], col = counts.col[2])
text(132, 58, z2["00001"], cex = cex[2], col = counts.col[2])
text(146, 241, z2["11000"], cex = cex[3], col = counts.col[2])
text(123, 177, z2["10100"], cex = cex[3], col = counts.col[2])
text(275, 141, z2["10010"], cex = cex[3], col = counts.col[2])
text(137, 140, z2["10001"], cex = cex[3], col = counts.col[2])
text(243, 257, z2["01100"], cex = cex[3], col = counts.col[2])
text(175, 256, z2["01010"], cex = cex[3], col = counts.col[2])
text(187, 107, z2["01001"], cex = cex[3], col = counts.col[2])
text(286, 183, z2["00110"], cex = cex[3], col = counts.col[2])
text(267, 227, z2["00101"], cex = cex[3], col = counts.col[2])
text(228, 94, z2["00011"], cex = cex[3], col = counts.col[2])
text(148, 200, z2["11100"], cex = cex[3], col = counts.col[2])
text(159, 246, z2["11010"], cex = cex[3], col = counts.col[2])
text(171, 134, z2["11001"], cex = cex[3], col = counts.col[2])
text(281, 168, z2["10110"], cex = cex[3], col = counts.col[2])
text(143, 152, z2["10101"], cex = cex[3], col = counts.col[2])
text(252, 134, z2["10011"], cex = cex[3], col = counts.col[2])
text(205, 244, z2["01110"], cex = cex[3], col = counts.col[2])
text(254, 239, z2["01101"], cex = cex[3], col = counts.col[2])
text(211, 109, z2["01011"], cex = cex[3], col = counts.col[2])
text(267, 204, z2["00111"], cex = cex[3], col = counts.col[2])
text(170, 220, z2["11110"], cex = cex[3], col = counts.col[2])
text(158, 159, z2["11101"], cex = cex[3], col = counts.col[2])
text(212, 130, z2["11011"], cex = cex[3], col = counts.col[2])
text(263, 169, z2["10111"], cex = cex[3], col = counts.col[2])
text(239, 225, z2["01111"], cex = cex[3], col = counts.col[2])
text(204, 179, z2["11111"], cex = cex[2], col = counts.col[2])
#text(400, -10, sprintf("Not in any = %i", z2["00000"]), cex = cex[1], col = counts.col[2])
if (show.include) {
text(10, 7, include[1], cex = cex[1], col = counts.col[1])
text(10, -10, include[2], cex = cex[1], col = counts.col[2])
}
}
invisible()
}
## 2. CHROMOSOME'S SIZE
chrs = read.table(paste0(AI, "/Chromosomes/", spe, "_chrs.txt"), header = F, sep = "\t", quote = "\"")
table_conv = data.frame(chrs.old = chrs$V1, chrs.new = sprintf("%02d", 1:length(chrs$V1)))
table_conv$chrs.new = paste0("chr", table_conv$chrs.new)
chrs.sizes = read.table(paste0(WD, "/", spe, ".sizes_genome.txt"), header = F, sep = "\t", quote = "\"")
chrs.sizes = merge(chrs.sizes, table_conv, by.x = "V1", by.y = "chrs.old", all.x = F)
chrs.sizes$V1 = chrs.sizes$chrs.new
chrs.sizes$chrs.new = NULL
colnames(chrs.sizes) = c("Chr", "Start", "End")
rm(list = c("chrs"))
#### 3. LNCRNAS DATABASE AND GENES FILE
DB = read.table(lncRNAs_tab, header = T, sep = "\t", quote = "\"")
DB = merge(DB, table_conv, by.x = "Chr", by.y = "chrs.old", all.x = F)
DB$Chr = DB$chrs.new
DB$chrs.new = NULL
Genes = read.table(genes_tab, header = T, sep = "\t", quote = "\"")
Genes$Class_code = "pc"
Genes = merge(Genes, table_conv, by.x = "Chr", by.y = "chrs.old", all.x = F)
Genes$Chr = Genes$chrs.new
Genes$chrs.new = NULL
rm(list = c("table_conv"))
confidence = "High"
bed_genes = Genes[, c("Chr", "Start", "End")]
bed_genes = bed_genes[order(bed_genes$Chr, bed_genes$Start),]
bed_u = DB[DB$Class_code == "u" & DB$Significance_level == confidence, c("Chr", "Start", "End")]
bed_u = bed_u[order(bed_u$Chr, bed_u$Start),]
bed_x = DB[DB$Class_code == "x" & DB$Significance_level == confidence, c("Chr", "Start", "End")]
bed_x = bed_x[order(bed_x$Chr, bed_x$Start),]
bed_i = DB[DB$Class_code == "i" & DB$Significance_level == confidence, c("Chr", "Start", "End")]
bed_i = bed_i[order(bed_i$Chr, bed_i$Start),]
bed_o_e = DB[(DB$Class_code == "o" | DB$Class_code == "e") & DB$Significance_level == confidence, c("Chr", "Start", "End")]
bed_o_e = bed_o_e[order(bed_o_e$Chr, bed_o_e$Start),]
Tab_genes = genomicDensity(bed_genes, window.size = 100000, count_by = "number")
colnames(Tab_genes)[colnames(Tab_genes) == "value"] = "pc"
Tab_u = genomicDensity(bed_u, window.size = 100000, count_by = "number")
colnames(Tab_u)[colnames(Tab_u) == "value"] = "u"
Tab_x = genomicDensity(bed_x, window.size = 100000, count_by = "number")
colnames(Tab_x)[colnames(Tab_x) == "value"] = "x"
Tab_i = genomicDensity(bed_i, window.size = 100000, count_by = "number")
colnames(Tab_i)[colnames(Tab_i) == "value"] = "i"
Tab_o_e = genomicDensity(bed_o_e, window.size = 100000, count_by = "number")
colnames(Tab_o_e)[colnames(Tab_o_e) == "value"] = "o/e"
Tab_number_wide = merge(Tab_genes, Tab_u, by = c("chr", "start", "end"), all = T)
Tab_number_wide = merge(Tab_number_wide, Tab_x, by = c("chr", "start", "end"), all = T)
Tab_number_wide = merge(Tab_number_wide, Tab_i, by = c("chr", "start", "end"), all = T)
Tab_number_wide = merge(Tab_number_wide, Tab_o_e, by = c("chr", "start", "end"), all = T)
Tab_number_wide[is.na(Tab_number_wide)] = 0
colnames(Tab_number_wide) = c("Chr", "Start", "End", "Number_transcripts.pc", "Number_transcripts.u", "Number_transcripts.x", "Number_transcripts.i", "Number_transcripts.o/e")
write.table(Tab_number_wide, paste0(WD, "/", spe, "-", confidence, "-Number-100Kb.tsv"), col.names = T, sep = "\t", row.names = F, quote = F)
rm(list = c("bed_genes", "bed_u", "bed_x", "bed_i", "bed_o_e", "Tab_genes", "Tab_u", "Tab_x", "Tab_i", "Tab_o_e"))
###### 4.1.3 Determine which windows are high-density regions.
## Calculate a threshold by class code as:
##    - 1. The mean of number of transcripts across all windows.
##    - 2. Multiply by 1.5.
##    - 3. Round up the number.
Tab_number_long = melt(setDT(Tab_number_wide), id.vars = c("Chr", "Start", "End"), variable.name = "Class_code")
colnames(Tab_number_long) = c("Chr", "Start", "End", "Class_code", "Number_transcripts")
Tab_number_long$Class_code = gsub("Number_transcripts.", "", Tab_number_long$Class_code)
Tab_number_threshold = Tab_number_long %>% group_by(Class_code) %>% summarise(Mean = mean(Number_transcripts), Threshold = ceiling(mean(Number_transcripts) * 1.5))
Tab_number_threshold = as.data.frame(Tab_number_threshold)
## Classify a window as high-density region if it is greater than its threshold.
Tab_number_long = merge(Tab_number_long, Tab_number_threshold, by = "Class_code", all = T)
Tab_number_long$"HDW" = ifelse(Tab_number_long$Number_transcripts > Tab_number_long$Threshold, 1, 0)
Tab_number_long$Class_code = factor(Tab_number_long$Class_code, levels = c("pc", "u", "x", "i", "o/e"))
Tab_number_long$Chr = factor(Tab_number_long$Chr, levels = chrs.sizes$Chr)
Tab_number_long = Tab_number_long[,c("Chr", "Start", "End", "Class_code", "Number_transcripts", "Mean", "Threshold", "HDW")]
## Collapse the long table by class code and chromosome.
Tab_number_summary_1 = Tab_number_long %>% group_by(Chr, Class_code, .drop = F) %>% summarise(HDWs = sum(HDW))
View(Tab_number_summary_1)
## Create the table.
Tab_number_wide_mod = Tab_number_wide
Tab_number_wide_mod$"HDW.pc" = ifelse(Tab_number_wide_mod$Number_transcripts.pc > Tab_number_threshold[Tab_number_threshold$Class_code == "pc", "Threshold"], 1, 0)
Tab_number_wide_mod$"HDW.u" = ifelse(Tab_number_wide_mod$Number_transcripts.u > Tab_number_threshold[Tab_number_threshold$Class_code == "u", "Threshold"], 1, 0)
Tab_number_wide_mod$"HDW.x" = ifelse(Tab_number_wide_mod$Number_transcripts.x > Tab_number_threshold[Tab_number_threshold$Class_code == "x", "Threshold"], 1, 0)
Tab_number_wide_mod$"HDW.i" = ifelse(Tab_number_wide_mod$Number_transcripts.i > Tab_number_threshold[Tab_number_threshold$Class_code == "i", "Threshold"], 1, 0)
Tab_number_wide_mod$"HDW.o/e" = ifelse(Tab_number_wide_mod$`Number_transcripts.o/e` > Tab_number_threshold[Tab_number_threshold$Class_code == "o/e", "Threshold"], 1, 0)
Tab_number_wide_mod$"HDWs.Coincidences" = rowSums(Tab_number_wide_mod[,9:13])
Tab_number_wide_mod$"ID" = paste0(Tab_number_wide_mod$Chr, "_", Tab_number_wide_mod$Start, "_", Tab_number_wide_mod$End)
Tab_number_wide_mod = Tab_number_wide_mod[,c("Chr", "Start", "End", "ID", "Number_transcripts.pc", "Number_transcripts.u", "Number_transcripts.x", "Number_transcripts.i",
"Number_transcripts.o/e", "HDW.pc", "HDW.u", "HDW.x", "HDW.i", "HDW.o/e", "HDWs.Coincidences")]
write.table(Tab_number_wide_mod, paste0(WD, "/", spe, "-", confidence, "-Number-100Kb-HDWs.tsv"), col.names = T, sep = "\t", row.names = F, quote = F)
Tab_number_wide_mod_1 = as.data.frame(Tab_number_wide_mod[Tab_number_wide_mod$Coincidences >= 1,])
View(Tab_number_wide_mod_1)
Tab_number_wide_mod_1 = as.data.frame(Tab_number_wide_mod[Tab_number_wide_mod$HDWs.Coincidences >= 1,])
