tab_mean_merged = merge(tab_mean_merged, Motlev, by = c("ID_transcript", "Comparison"), all = T)
# Load table with the tissue specificity results and the log-tranformed expression values.
tab_mean_TAU = read.table(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP2/", spe, "/", SRA.Study, "_mean-TAU.tsv"), sep = "\t", header = T, quote = "\"")
tab_mean_TAU = tab_mean_TAU[tab_mean_TAU$Class_code != "pc", c("ID_transcript", "Confidence", "Class_code", "TAU")]
tab_mean_TAU$ID_transcript = paste0(tab_mean_TAU$ID_transcript, "-", spe)
# Add column to specify TAU > 0.8
tab_mean_TAU$"Type" = ifelse(tab_mean_TAU$TAU >= 0.8, "TS", "Non-TS")
# Load LncRNA features info.
if (flag == "nr") {
tab_info = read.table(paste0(path_comp, "/ALL/TAB_WIDE_FINAL_ALL_SPECIES-NR.tsv"), sep = "\t", header = T, quote = "\"")
tab_info = tab_info[tab_info$Specie == spe_l & tab_info$Type.1 != "Intergenic Regions" & tab_info$Type.1 != "Genes", c("ID_transcript", "Type.1", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")]
tab_info$ID_transcript = paste0(tab_info$ID_transcript, "-", spe)
colnames(tab_info) = c("ID_transcript", "Confidence", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")
}
if (flag == "r") {
tab_info = read.table(paste0(path_comp, "/ALL/TAB_WIDE_FINAL_ALL_SPECIES-R.tsv"), sep = "\t", header = T, quote = "\"")
tab_info = tab_info[tab_info$Specie == spe_l & tab_info$Type.1 != "Intergenic Regions" & tab_info$Type.1 != "Genes", c("ID_transcript", "Type.1", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")]
tab_info$ID_transcript = paste0(tab_info$ID_transcript, "-", spe)
colnames(tab_info) = c("ID_transcript", "Confidence", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")
}
tab_info[tab_info == 'LncRNAs low'] = 'Low-confidence lncRNA'
tab_info[tab_info == 'LncRNAs medium'] = 'Medium-confidence lncRNA'
tab_info[tab_info == 'LncRNAs high'] = 'High-confidence lncRNA'
# Join TAU info with features info. NA values refer to lncRNAs and genes that had no more than 1 TPM in any of the tissues and those that were duplicated during quantification.
tab_mean_merged = merge(tab_mean_TAU, tab_info, by = c("ID_transcript", "Confidence", "Class_code"), all = T)
tab_mean_merged$Type = ifelse(is.na(tab_mean_merged$TAU), "Non-analysed", tab_mean_merged$Type)
# Add conservation info.
tab_mean_merged = merge(tab_mean_merged, SeqlevB, by = "ID_transcript", all = T)
View(SeqlevB)
tab_mean_merged = merge(tab_mean_TAU, tab_info, by = c("ID_transcript", "Confidence", "Class_code"), all = T)
tab_mean_merged$Type = ifelse(is.na(tab_mean_merged$TAU), "Non-analysed", tab_mean_merged$Type)
View(tab_mean_merged)
# Add conservation info.
tab_mean_merged = merge(tab_mean_merged, SeqlevB, by = "ID_transcript", all = T)
# Load table with the tissue specificity results and the log-tranformed expression values.
tab_mean_TAU = read.table(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP2/", spe, "/", SRA.Study, "_mean-TAU.tsv"), sep = "\t", header = T, quote = "\"")
tab_mean_TAU = tab_mean_TAU[tab_mean_TAU$Class_code != "pc", c("ID_transcript", "Confidence", "Class_code", "TAU")]
tab_mean_TAU$ID_transcript = paste0(tab_mean_TAU$ID_transcript, "-", spe)
# Add column to specify TAU > 0.8
tab_mean_TAU$"Type" = ifelse(tab_mean_TAU$TAU >= 0.8, "TS", "Non-TS")
# Load LncRNA features info.
if (flag == "nr") {
tab_info = read.table(paste0(path_comp, "/ALL/TAB_WIDE_FINAL_ALL_SPECIES-NR.tsv"), sep = "\t", header = T, quote = "\"")
tab_info = tab_info[tab_info$Specie == spe_l & tab_info$Type.1 != "Intergenic Regions" & tab_info$Type.1 != "Genes", c("ID_transcript", "Type.1", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")]
tab_info$ID_transcript = paste0(tab_info$ID_transcript, "-", spe)
colnames(tab_info) = c("ID_transcript", "Confidence", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")
}
if (flag == "r") {
tab_info = read.table(paste0(path_comp, "/ALL/TAB_WIDE_FINAL_ALL_SPECIES-R.tsv"), sep = "\t", header = T, quote = "\"")
tab_info = tab_info[tab_info$Specie == spe_l & tab_info$Type.1 != "Intergenic Regions" & tab_info$Type.1 != "Genes", c("ID_transcript", "Type.1", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")]
tab_info$ID_transcript = paste0(tab_info$ID_transcript, "-", spe)
colnames(tab_info) = c("ID_transcript", "Confidence", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")
}
tab_info[tab_info == 'LncRNAs low'] = 'Low-confidence lncRNA'
tab_info[tab_info == 'LncRNAs medium'] = 'Medium-confidence lncRNA'
tab_info[tab_info == 'LncRNAs high'] = 'High-confidence lncRNA'
# Join TAU info with features info. NA values refer to lncRNAs and genes that had no more than 1 TPM in any of the tissues and those that were duplicated during quantification.
tab_mean_merged = merge(tab_mean_TAU, tab_info, by = c("ID_transcript", "Confidence", "Class_code"), all = T)
tab_mean_merged$Type = ifelse(is.na(tab_mean_merged$TAU), "Non-analysed", tab_mean_merged$Type)
# Add conservation info.
tab_mean_merged = merge(tab_mean_merged, SeqlevB, by = "ID_transcript", all.x = T, all.y = F)
tab_mean_merged = merge(tab_mean_merged, SeqlevOF, by = c("ID_transcript", "Comparison"), all.x = T, all.y = F)
tab_mean_merged = merge(tab_mean_merged, Poslev, by = c("ID_transcript", "Comparison"), all.x = T, all.y = F)
tab_mean_merged = merge(tab_mean_merged, Motlev, by = c("ID_transcript", "Comparison"), all.x = T, all.y = F)
# Convert to factors.
tab_mean_merged$Confidence = factor(tab_mean_merged$Confidence, levels = c("Low-confidence lncRNA", "Medium-confidence lncRNA", "High-confidence lncRNA"))
tab_mean_merged$Class_code = factor(tab_mean_merged$Class_code, levels = c("u", "x", "i", "o/e"))
tab_mean_merged$Type = factor(tab_mean_merged$Type, levels = c("Non-analysed", "Non-TS", "TS"))
tab_mean_merged$"Spe" = spe
tab_mean_merged$"SRA.Study" = SRA.Study
View(tab_mean_merged)
colnames(tab_mean_merged)
# Add info.
cbind(SRA.Study = SRA.Study, tab_mean_merged)
# Add info.
tab_mean_merged = cbind(SRA.Study = SRA.Study, tab_mean_merged)
################################################################################
#
# ALL: TISSUE SPECIFICITY STUDY: APPROACH 1 - STEP 7
#
# Motif-level conservation, Positional-level conservation and Tissue-specificity
# analysis.
#
################################################################################
rm(list = ls())
## 0. INSTALL AND LOAD LIBRARIES
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(ggExtra))
suppressMessages(library(data.table))
suppressMessages(options(bitmapType='cairo'))
## 1. PATHS
# Own computer
path_tissue_specificity = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/09-Tissue-specificity"
path_comp = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/07-comparison_lncRNAs_vs_coding_genes"
path_cons = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/08-comparative_genomics"
flag = "nr"
species_short_name = c("csa", "cme", "cla", "lsi", "cmo", "car", "cpe", "cma", "mch")
species_long_name = c("C. sativus", "C. melo", "C. lanatus", "L. siceraria", "C. moschata", "C. argyrosperma", "C. pepo", "C. maxima", "M. charantia")
comparisons = c("ALL", "intergenic", "antisense", "intronic", "sense")
confidences = c("Low", "Medium", "High")
# # Garnatxa
# path_tissue_specificity = "/storage/ncRNA/Projects/lncRNAs/Cucurbitaceae/Results/09-Tissue-specificity"
# path_comp = "/storage/ncRNA/Projects/lncRNAs/Cucurbitaceae/Results/07-comparison_lncRNAs_vs_coding_genes"
# path_cons = "/storage/ncRNA/Projects/lncRNAs/Cucurbitaceae/Results/08-comparative_genomics"
# flag = "nr"
# species_short_name = c("csa", "cme", "cla", "lsi", "cmo", "car", "cpe", "cma", "mch")
# species_long_name = c("C. sativus", "C. melo", "C. lanatus", "L. siceraria", "C. moschata", "C. argyrosperma", "C. pepo", "C. maxima", "M. charantia")
## 2. MEAN TAU - TABLES AND FIGURES
cat(paste0("\n\n--- MEAN TAU (TABLE): \n"))
# Load lncRNAs conservation info at sequence level (BLastn).
SeqlevB = read.table(paste0(path_cons, "/Sequence_level/Blastn/", flag, "/Definitive/06-Figures/TABLE_LNCRNAS_PERCENTAGE_ALL.tsv"), header = T, sep = "\t", quote = "\"")
SeqlevB = SeqlevB[, c("Member", "Type", "Conserved_level", "Number_species_by_family", "Class")]
colnames(SeqlevB) = c("ID_transcript", "SeqLev.Blastn.Conservation_1", "SeqLev.Blastn.Conservation_2", "SeqLev.Blastn.Conservation_3", "Comparison")
SeqB_extra_info = data.frame()
for (con in confidences) {
for (com in comparisons) {
tab = read.table(paste0(path_cons, "/Sequence_level/Blastn/", flag, "/Definitive/05-Families/", con, "/", com, "/gen.tsv"), header = T, sep = "\t", quote = "\"")
tab = tab[, c("Member", "Family")]
colnames(tab) = c("ID_transcript", "SeqLev.Blastn.Family")
tab$"Comparison" = com
SeqB_extra_info = rbind(SeqB_extra_info, tab)
}
}
SeqlevB = merge(SeqlevB, SeqB_extra_info, by = c("ID_transcript", "Comparison"), all = T)
# Load lncRNAs conservation info at sequence level (OrthoFinder).
SeqlevOF = read.table(paste0(path_cons, "/Sequence_level/OrthoFinder/", flag, "/Definitive/06-Figures/TABLE_LNCRNAS_PERCENTAGE_ALL.tsv"), header = T, sep = "\t", quote = "\"")
SeqlevOF = SeqlevOF[, c("Member", "Type", "Conserved_level", "Number_species_by_family", "Class")]
colnames(SeqlevOF) = c("ID_transcript", "SeqLev.OF.Conservation_1", "SeqLev.OF.Conservation_2", "SeqLev.OF.Conservation_3", "Comparison")
SeqOF_extra_info = data.frame()
for (con in confidences) {
for (com in comparisons) {
tab = read.table(paste0(path_cons, "/Sequence_level/OrthoFinder/", flag, "/Definitive/05-Families/", con, "/", com, "/gen.tsv"), header = T, sep = "\t", quote = "\"")
tab = tab[, c("Member", "Family")]
colnames(tab) = c("ID_transcript", "SeqLev.OF.Family")
tab$"Comparison" = com
SeqOF_extra_info = rbind(SeqOF_extra_info, tab)
}
}
SeqlevOF = merge(SeqlevOF, SeqOF_extra_info, by = c("ID_transcript", "Comparison"), all = T)
# Load lncRNAs conservation info at positional level.
Poslev = read.table(paste0(path_cons, "/Positional_level/Approach_2/", flag, "/05-Figures/TABLE_LNCRNAS_PERCENTAGE_ALL.tsv"), header = T, sep = "\t", quote = "\"")
Poslev = Poslev[Poslev$Strictness == "ORIGINAL" & Poslev$NonMatch == "no", c("Member", "Type", "Conserved_level", "Number_species_by_family", "Class")]
colnames(Poslev) = c("ID_transcript", "PosLev.Conservation_1", "PosLev.Conservation_2", "PosLev.Conservation_3", "Comparison")
Pos_extra_info = data.frame()
for (con in confidences) {
for (com in comparisons) {
tab = read.table(paste0(path_cons, "/Positional_level/Approach_2/", flag, "/04-Families/", con, "/", com, "/gen_ORIGINAL_no.tsv"), header = T, sep = "\t", quote = "\"")
tab = tab[, c("Member", "Family")]
colnames(tab) = c("ID_transcript", "PosLev.Family")
tab$"Comparison" = com
Pos_extra_info = rbind(Pos_extra_info, tab)
}
}
Poslev = merge(Poslev, Pos_extra_info, by = c("ID_transcript", "Comparison"), all = T)
# Load lncRNAs conservation info at motif level.
Motlev = read.table(paste0(path_cons, "/Motif_level/", flag, "/Positional_conserved/06-Figures_and_tables/Tables/ORIGINAL/no/GLOBAL_TABLE_MEME-GOMO-POSLEV.tsv"), header = T, sep = "\t", quote = "\"")
Motlev = Motlev[Motlev$Type == "REAL", c("LncRNA", "Comparison", "Mode", "Width", "Meme_Motif.Identifier", "Meme_Motif.E.value", "Meme_Motif.LncRNA", "Meme_Motif.P.value", "Meme_Motif.Width", "Gomo_GO.Term.Identifier", "Gomo_Q.value")]
colnames(Motlev) = c("ID_transcript", "Comparison", "MotLev.Mode", "MotLev.Width", "MotLev.Meme_Motif.Identifier", "MotLev.Meme_Motif.E.value", "MotLev.Meme_Motif.LncRNA", "MotLev.Meme_Motif.P.value", "MotLev.Meme_Motif.Width", "MotLev.Gomo_GO.Term.Identifier", "MotLev.Gomo_Q.value")
rm(list = c("con", "com", "SeqB_extra_info", "SeqOF_extra_info", "Pos_extra_info", "tab"))
TAB_mean = data.frame()
for (i in 1:length(species_short_name)) {
spe = species_short_name[i]
spe_l = species_long_name[i]
cat(paste0("------ Specie: ", spe, "\n"))
# Directories.
if (!dir.exists(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7"))){
dir.create(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7"))
}
if (!dir.exists(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7/", spe))){
dir.create(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7/", spe))
}
# Get files with TAU metric values and log-transformed expression values.
files = list.files(path = paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP2/", spe), pattern = ".tsv")
if (length(files) > 0) {
SRA.Studies = unique(unlist(lapply(strsplit(files, "_"), `[[`, 1)))
for (SRA.Study in SRA.Studies) {
cat(paste0("--------- SRA.Study: ", SRA.Study, "\n"))
# Load table with the tissue specificity results and the log-tranformed expression values.
tab_mean_TAU = read.table(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP2/", spe, "/", SRA.Study, "_mean-TAU.tsv"), sep = "\t", header = T, quote = "\"")
tab_mean_TAU = tab_mean_TAU[tab_mean_TAU$Class_code != "pc", c("ID_transcript", "Confidence", "Class_code", "TAU")]
tab_mean_TAU$ID_transcript = paste0(tab_mean_TAU$ID_transcript, "-", spe)
# Add column to specify TAU > 0.8
tab_mean_TAU$"Type" = ifelse(tab_mean_TAU$TAU >= 0.8, "TS", "Non-TS")
# Load LncRNA features info.
if (flag == "nr") {
tab_info = read.table(paste0(path_comp, "/ALL/TAB_WIDE_FINAL_ALL_SPECIES-NR.tsv"), sep = "\t", header = T, quote = "\"")
tab_info = tab_info[tab_info$Specie == spe_l & tab_info$Type.1 != "Intergenic Regions" & tab_info$Type.1 != "Genes", c("ID_transcript", "Type.1", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")]
tab_info$ID_transcript = paste0(tab_info$ID_transcript, "-", spe)
colnames(tab_info) = c("ID_transcript", "Confidence", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")
}
if (flag == "r") {
tab_info = read.table(paste0(path_comp, "/ALL/TAB_WIDE_FINAL_ALL_SPECIES-R.tsv"), sep = "\t", header = T, quote = "\"")
tab_info = tab_info[tab_info$Specie == spe_l & tab_info$Type.1 != "Intergenic Regions" & tab_info$Type.1 != "Genes", c("ID_transcript", "Type.1", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")]
tab_info$ID_transcript = paste0(tab_info$ID_transcript, "-", spe)
colnames(tab_info) = c("ID_transcript", "Confidence", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")
}
tab_info[tab_info == 'LncRNAs low'] = 'Low-confidence lncRNA'
tab_info[tab_info == 'LncRNAs medium'] = 'Medium-confidence lncRNA'
tab_info[tab_info == 'LncRNAs high'] = 'High-confidence lncRNA'
# Join TAU info with features info. NA values refer to lncRNAs and genes that had no more than 1 TPM in any of the tissues and those that were duplicated during quantification.
tab_mean_merged = merge(tab_mean_TAU, tab_info, by = c("ID_transcript", "Confidence", "Class_code"), all = T)
tab_mean_merged$Type = ifelse(is.na(tab_mean_merged$TAU), "Non-analysed", tab_mean_merged$Type)
# Add conservation info.
tab_mean_merged = merge(tab_mean_merged, SeqlevB, by = "ID_transcript", all.x = T, all.y = F)
tab_mean_merged = merge(tab_mean_merged, SeqlevOF, by = c("ID_transcript", "Comparison"), all.x = T, all.y = F)
tab_mean_merged = merge(tab_mean_merged, Poslev, by = c("ID_transcript", "Comparison"), all.x = T, all.y = F)
tab_mean_merged = merge(tab_mean_merged, Motlev, by = c("ID_transcript", "Comparison"), all.x = T, all.y = F)
# Convert to factors.
tab_mean_merged$Confidence = factor(tab_mean_merged$Confidence, levels = c("Low-confidence lncRNA", "Medium-confidence lncRNA", "High-confidence lncRNA"))
tab_mean_merged$Class_code = factor(tab_mean_merged$Class_code, levels = c("u", "x", "i", "o/e"))
tab_mean_merged$Type = factor(tab_mean_merged$Type, levels = c("Non-analysed", "Non-TS", "TS"))
# Save table.
write.table(tab_mean_merged, paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7/", spe, "/", SRA.Study, "_mean-ALL.tsv"), sep = "\t", quote = F, row.names = F, col.names = T)
# Add info.
tab_mean_merged = cbind(SRA.Study = SRA.Study, tab_mean_merged)
tab_mean_merged = cbind(Spe = spe, tab_mean_merged)
TAB_mean = rbind(TAB_mean, tab_mean_merged)
rm(list = c("tab_mean_TAU", "tab_info", "tab_mean_merged"))
}
}
}
write.table(TAB_mean, paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7/mean-ALL.tsv"), sep = "\t", quote = F, row.names = F, col.names = T)
rm(list = c("files", "spe", "spe_l", "SRA.Study", "SRA.Studies", "i"))
View(TAB_mean)
View(TAB_mean)
TAB_mean_TS = TAB_mean[TAB_mean$Type == "TS",]
View(TAB_mean_TS)
colnames(TAB_mean)
View(TAB_mean_TS)
length(unique(TAB_mean[TAB_mean$MotLev.Width = "6-15", "ID_transcript"]))
length(unique(TAB_mean[TAB_mean$MotLev.Width == "6-15", "ID_transcript"]))
length(unique(TAB_mean[TAB_mean$MotLev.Width == "6-50", "ID_transcript"]))
TAB_mean_red_SeqB = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "SeqLev.Blastn.Conservation_1", "SeqLev.Blastn.Conservation_2", "SeqLev.Blastn.Conservation_3", "SeqLev.Blastn.Family")]
TAB_mean_red_SeqB = TAB_mean_red_SeqB[!duplicated(TAB_mean_red_SeqB),]
View(TAB_mean_red_SeqB)
unique(TAB_mean$SeqLev.Blastn.Conservation_1)
unique(TAB_mean$SeqLev.Blastn.Conservation_2)
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(ggExtra))
suppressMessages(library(data.table))
suppressMessages(options(bitmapType='cairo'))
TAB_mean_red_SeqB %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, SeqLev.Blastn.Conservation_2, .drop=FALSE) %>%
mutate(Counts = n_distinct(ID_transcript))
TAB_mean_collapsed_SeqB = TAB_mean_red_SeqB %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, SeqLev.Blastn.Conservation_2, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
View(TAB_mean_collapsed_SeqB)
TAB_mean_red_SeqOF = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "SeqLev.OF.Conservation_1", "SeqLev.OF.Conservation_2", "SeqLev.OF.Conservation_3", "SeqLev.OF.Family")]
TAB_mean_red_SeqOF = TAB_mean_red_SeqOF[!duplicated(TAB_mean_red_SeqOF),]
TAB_mean_collapsed_SeqOF = TAB_mean_red_SeqOF %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, SeqLev.OF.Conservation_2, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
View(TAB_mean_collapsed_SeqOF)
View(TAB_mean_red_SeqOF)
table(is.na(TAB_mean_collapsed_SeqB))
table(is.na(TAB_mean_collapsed_SeqOF))
table(is.na(TAB_mean_collapsed_SeqOF$SeqLev.OF.Conservation_2))
table(is.na(TAB_mean_collapsed_SeqB$SeqLev.Blastn.Conservation_2))
################################################################################
#
# ALL: TISSUE SPECIFICITY STUDY: APPROACH 1 - STEP 7
#
# Motif-level conservation, Positional-level conservation and Tissue-specificity
# analysis.
#
################################################################################
rm(list = ls())
## 0. INSTALL AND LOAD LIBRARIES
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(ggExtra))
suppressMessages(library(data.table))
suppressMessages(options(bitmapType='cairo'))
## 1. PATHS
# Own computer
path_tissue_specificity = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/09-Tissue-specificity"
path_comp = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/07-comparison_lncRNAs_vs_coding_genes"
path_cons = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results/08-comparative_genomics"
flag = "nr"
species_short_name = c("csa", "cme", "cla", "lsi", "cmo", "car", "cpe", "cma", "mch")
species_long_name = c("C. sativus", "C. melo", "C. lanatus", "L. siceraria", "C. moschata", "C. argyrosperma", "C. pepo", "C. maxima", "M. charantia")
comparisons = c("ALL", "intergenic", "antisense", "intronic", "sense")
confidences = c("Low", "Medium", "High")
# # Garnatxa
# path_tissue_specificity = "/storage/ncRNA/Projects/lncRNAs/Cucurbitaceae/Results/09-Tissue-specificity"
# path_comp = "/storage/ncRNA/Projects/lncRNAs/Cucurbitaceae/Results/07-comparison_lncRNAs_vs_coding_genes"
# path_cons = "/storage/ncRNA/Projects/lncRNAs/Cucurbitaceae/Results/08-comparative_genomics"
# flag = "nr"
# species_short_name = c("csa", "cme", "cla", "lsi", "cmo", "car", "cpe", "cma", "mch")
# species_long_name = c("C. sativus", "C. melo", "C. lanatus", "L. siceraria", "C. moschata", "C. argyrosperma", "C. pepo", "C. maxima", "M. charantia")
## 2. LOAD CONSERVATION INFO.
cat(paste0("\n\n--- LOAD CONSERVATION INFO... \n"))
# Load lncRNAs conservation info at sequence level (BLastn).
cat(paste0("------ Sequence Level (Blastn)\n"))
SeqlevB = read.table(paste0(path_cons, "/Sequence_level/Blastn/", flag, "/Definitive/06-Figures/TABLE_LNCRNAS_PERCENTAGE_ALL.tsv"), header = T, sep = "\t", quote = "\"")
SeqlevB = SeqlevB[, c("Member", "Type", "Conserved_level", "Number_species_by_family", "Class")]
colnames(SeqlevB) = c("ID_transcript", "SeqLev.Blastn.Conservation_1", "SeqLev.Blastn.Conservation_2", "SeqLev.Blastn.Conservation_3", "Comparison")
SeqB_extra_info = data.frame()
for (con in confidences) {
for (com in comparisons) {
tab = read.table(paste0(path_cons, "/Sequence_level/Blastn/", flag, "/Definitive/05-Families/", con, "/", com, "/gen.tsv"), header = T, sep = "\t", quote = "\"")
tab = tab[, c("Member", "Family")]
colnames(tab) = c("ID_transcript", "SeqLev.Blastn.Family")
tab$"Comparison" = com
SeqB_extra_info = rbind(SeqB_extra_info, tab)
}
}
SeqlevB = merge(SeqlevB, SeqB_extra_info, by = c("ID_transcript", "Comparison"), all = T)
# Load lncRNAs conservation info at sequence level (OrthoFinder).
cat(paste0("------ Sequence Level (OrthoFinder)\n"))
SeqlevOF = read.table(paste0(path_cons, "/Sequence_level/OrthoFinder/", flag, "/Definitive/06-Figures/TABLE_LNCRNAS_PERCENTAGE_ALL.tsv"), header = T, sep = "\t", quote = "\"")
SeqlevOF = SeqlevOF[, c("Member", "Type", "Conserved_level", "Number_species_by_family", "Class")]
colnames(SeqlevOF) = c("ID_transcript", "SeqLev.OF.Conservation_1", "SeqLev.OF.Conservation_2", "SeqLev.OF.Conservation_3", "Comparison")
SeqOF_extra_info = data.frame()
for (con in confidences) {
for (com in comparisons) {
tab = read.table(paste0(path_cons, "/Sequence_level/OrthoFinder/", flag, "/Definitive/05-Families/", con, "/", com, "/gen.tsv"), header = T, sep = "\t", quote = "\"")
tab = tab[, c("Member", "Family")]
colnames(tab) = c("ID_transcript", "SeqLev.OF.Family")
tab$"Comparison" = com
SeqOF_extra_info = rbind(SeqOF_extra_info, tab)
}
}
SeqlevOF = merge(SeqlevOF, SeqOF_extra_info, by = c("ID_transcript", "Comparison"), all = T)
# Load lncRNAs conservation info at positional level.
cat(paste0("------ Positional Level\n"))
Poslev = read.table(paste0(path_cons, "/Positional_level/Approach_2/", flag, "/05-Figures/TABLE_LNCRNAS_PERCENTAGE_ALL.tsv"), header = T, sep = "\t", quote = "\"")
Poslev = Poslev[Poslev$Strictness == "ORIGINAL" & Poslev$NonMatch == "no", c("Member", "Type", "Conserved_level", "Number_species_by_family", "Class")]
colnames(Poslev) = c("ID_transcript", "PosLev.Conservation_1", "PosLev.Conservation_2", "PosLev.Conservation_3", "Comparison")
Pos_extra_info = data.frame()
for (con in confidences) {
for (com in comparisons) {
tab = read.table(paste0(path_cons, "/Positional_level/Approach_2/", flag, "/04-Families/", con, "/", com, "/gen_ORIGINAL_no.tsv"), header = T, sep = "\t", quote = "\"")
tab = tab[, c("Member", "Family")]
colnames(tab) = c("ID_transcript", "PosLev.Family")
tab$"Comparison" = com
Pos_extra_info = rbind(Pos_extra_info, tab)
}
}
Poslev = merge(Poslev, Pos_extra_info, by = c("ID_transcript", "Comparison"), all = T)
# Load lncRNAs conservation info at motif level.
cat(paste0("------ Motif Level\n"))
Motlev = read.table(paste0(path_cons, "/Motif_level/", flag, "/Positional_conserved/06-Figures_and_tables/Tables/ORIGINAL/no/GLOBAL_TABLE_MEME-GOMO-POSLEV.tsv"), header = T, sep = "\t", quote = "\"")
Motlev = Motlev[Motlev$Type == "REAL", c("LncRNA", "Comparison", "Mode", "Width", "Meme_Motif.Identifier", "Meme_Motif.E.value", "Meme_Motif.LncRNA", "Meme_Motif.P.value", "Meme_Motif.Width", "Gomo_GO.Term.Identifier", "Gomo_Q.value")]
colnames(Motlev) = c("ID_transcript", "Comparison", "MotLev.Mode", "MotLev.Width", "MotLev.Meme_Motif.Identifier", "MotLev.Meme_Motif.E.value", "MotLev.Meme_Motif.LncRNA", "MotLev.Meme_Motif.P.value", "MotLev.Meme_Motif.Width", "MotLev.Gomo_GO.Term.Identifier", "MotLev.Gomo_Q.value")
rm(list = c("con", "com", "SeqB_extra_info", "SeqOF_extra_info", "Pos_extra_info", "tab"))
## 3. MEAN TAU - TABLES AND FIGURES
cat(paste0("\n\n--- MEAN TAU (TABLE): \n"))
TAB_mean = data.frame()
for (i in 1:length(species_short_name)) {
spe = species_short_name[i]
spe_l = species_long_name[i]
cat(paste0("------ Specie: ", spe, "\n"))
# Directories.
if (!dir.exists(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7"))){
dir.create(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7"))
}
if (!dir.exists(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7/", spe))){
dir.create(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7/", spe))
}
# Get files with TAU metric values and log-transformed expression values.
files = list.files(path = paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP2/", spe), pattern = ".tsv")
if (length(files) > 0) {
SRA.Studies = unique(unlist(lapply(strsplit(files, "_"), `[[`, 1)))
for (SRA.Study in SRA.Studies) {
cat(paste0("--------- SRA.Study: ", SRA.Study, "\n"))
# Load table with the tissue specificity results and the log-tranformed expression values.
tab_mean_TAU = read.table(paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP2/", spe, "/", SRA.Study, "_mean-TAU.tsv"), sep = "\t", header = T, quote = "\"")
tab_mean_TAU = tab_mean_TAU[tab_mean_TAU$Class_code != "pc", c("ID_transcript", "Confidence", "Class_code", "TAU")]
tab_mean_TAU$ID_transcript = paste0(tab_mean_TAU$ID_transcript, "-", spe)
# Add column to specify TAU > 0.8
tab_mean_TAU$"Type" = ifelse(tab_mean_TAU$TAU >= 0.8, "TS", "Non-TS")
# Load LncRNA features info.
if (flag == "nr") {
tab_info = read.table(paste0(path_comp, "/ALL/TAB_WIDE_FINAL_ALL_SPECIES-NR.tsv"), sep = "\t", header = T, quote = "\"")
tab_info = tab_info[tab_info$Specie == spe_l & tab_info$Type.1 != "Intergenic Regions" & tab_info$Type.1 != "Genes", c("ID_transcript", "Type.1", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")]
tab_info$ID_transcript = paste0(tab_info$ID_transcript, "-", spe)
colnames(tab_info) = c("ID_transcript", "Confidence", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")
}
if (flag == "r") {
tab_info = read.table(paste0(path_comp, "/ALL/TAB_WIDE_FINAL_ALL_SPECIES-R.tsv"), sep = "\t", header = T, quote = "\"")
tab_info = tab_info[tab_info$Specie == spe_l & tab_info$Type.1 != "Intergenic Regions" & tab_info$Type.1 != "Genes", c("ID_transcript", "Type.1", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")]
tab_info$ID_transcript = paste0(tab_info$ID_transcript, "-", spe)
colnames(tab_info) = c("ID_transcript", "Confidence", "Class_code", "Exons", "Log.Exons.1", "Length", "Log.Length", "GC", "log2.TPMs.1.mean", "overlap_per")
}
tab_info[tab_info == 'LncRNAs low'] = 'Low-confidence lncRNA'
tab_info[tab_info == 'LncRNAs medium'] = 'Medium-confidence lncRNA'
tab_info[tab_info == 'LncRNAs high'] = 'High-confidence lncRNA'
# Join TAU info with features info. NA values refer to lncRNAs and genes that had no more than 1 TPM in any of the tissues and those that were duplicated during quantification.
tab_mean_merged = merge(tab_mean_TAU, tab_info, by = c("ID_transcript", "Confidence", "Class_code"), all = T)
tab_mean_merged$Type = ifelse(is.na(tab_mean_merged$TAU), "Non-analysed", tab_mean_merged$Type)
# Add conservation info.
tab_mean_merged = merge(tab_mean_merged, SeqlevB, by = "ID_transcript", all.x = T, all.y = F)
tab_mean_merged = merge(tab_mean_merged, SeqlevOF, by = c("ID_transcript", "Comparison"), all.x = T, all.y = F)
tab_mean_merged = merge(tab_mean_merged, Poslev, by = c("ID_transcript", "Comparison"), all.x = T, all.y = F)
tab_mean_merged = merge(tab_mean_merged, Motlev, by = c("ID_transcript", "Comparison"), all.x = T, all.y = F)
# Convert to factors.
tab_mean_merged$Confidence = factor(tab_mean_merged$Confidence, levels = c("Low-confidence lncRNA", "Medium-confidence lncRNA", "High-confidence lncRNA"))
tab_mean_merged$Class_code = factor(tab_mean_merged$Class_code, levels = c("u", "x", "i", "o/e"))
tab_mean_merged$Type = factor(tab_mean_merged$Type, levels = c("Non-analysed", "Non-TS", "TS"))
tab_mean_merged$SeqLev.Blastn.Conservation_1 = factor(tab_mean_merged$SeqLev.Blastn.Conservation_1, levels = c("Non-conserved", "Conserved"))
tab_mean_merged$SeqLev.Blastn.Conservation_2 = factor(tab_mean_merged$SeqLev.Blastn.Conservation_2, levels = c("Non-conserved", "Low-conserved", "Medium-conserved", "High-conserved"))
tab_mean_merged$SeqLev.Blastn.Conservation_1 = factor(tab_mean_merged$SeqLev.Blastn.Conservation_1, levels = 1:9)
tab_mean_merged$SeqLev.OF.Conservation_1 = factor(tab_mean_merged$SeqLev.OF.Conservation_1, levels = c("Non-conserved", "Conserved"))
tab_mean_merged$SeqLev.OF.Conservation_2 = factor(tab_mean_merged$SeqLev.OF.Conservation_2, levels = c("Non-conserved", "Low-conserved", "Medium-conserved", "High-conserved"))
tab_mean_merged$SeqLev.OF.Conservation_1 = factor(tab_mean_merged$SeqLev.OF.Conservation_1, levels = 1:9)
tab_mean_merged$PosLev.Conservation_1 = factor(tab_mean_merged$PosLev.Conservation_1, levels = c("Non-conserved", "Conserved"))
tab_mean_merged$PosLev.Conservation_2 = factor(tab_mean_merged$PosLev.Conservation_2, levels = c("Non-conserved", "Low-conserved", "Medium-conserved", "High-conserved"))
tab_mean_merged$PosLev.Conservation_1 = factor(tab_mean_merged$PosLev.Conservation_1, levels = 1:9)
# Save table.
write.table(tab_mean_merged, paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7/", spe, "/", SRA.Study, "_mean-ALL.tsv"), sep = "\t", quote = F, row.names = F, col.names = T)
# Add info.
tab_mean_merged = cbind(SRA.Study = SRA.Study, tab_mean_merged)
tab_mean_merged = cbind(Spe = spe, tab_mean_merged)
TAB_mean = rbind(TAB_mean, tab_mean_merged)
rm(list = c("tab_mean_TAU", "tab_info", "tab_mean_merged"))
}
}
}
write.table(TAB_mean, paste0(path_tissue_specificity, "/approach_1/ALL/", flag, "/STEP7/mean-ALL.tsv"), sep = "\t", quote = F, row.names = F, col.names = T)
rm(list = c("files", "spe", "spe_l", "SRA.Study", "SRA.Studies", "i"))
View(TAB_mean)
## Create collapsed table 1.
TAB_mean_red_SeqB = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "SeqLev.Blastn.Conservation_1", "SeqLev.Blastn.Conservation_2", "SeqLev.Blastn.Conservation_3", "SeqLev.Blastn.Family")]
TAB_mean_red_SeqB = TAB_mean_red_SeqB[!duplicated(TAB_mean_red_SeqB),]
TAB_mean_collapsed_SeqB = TAB_mean_red_SeqB %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, SeqLev.Blastn.Conservation_2, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
TAB_mean_collapsed_SeqB = as.data.frame(TAB_mean_collapsed_SeqB)
## Create collapsed table 2.
TAB_mean_red_SeqOF = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "SeqLev.OF.Conservation_1", "SeqLev.OF.Conservation_2", "SeqLev.OF.Conservation_3", "SeqLev.OF.Family")]
TAB_mean_red_SeqOF = TAB_mean_red_SeqOF[!duplicated(TAB_mean_red_SeqOF),]
TAB_mean_collapsed_SeqOF = TAB_mean_red_SeqOF %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, SeqLev.OF.Conservation_2, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
TAB_mean_collapsed_SeqOF = as.data.frame(TAB_mean_collapsed_SeqOF)
## Create collapsed table 3.
TAB_mean_red_Pos = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "PosLev.Conservation_1", "PosLev.Conservation_2", "PosLev.Conservation_3", "PosLev.Family")]
TAB_mean_red_Pos = TAB_mean_red_Pos[!duplicated(TAB_mean_red_Pos),]
TAB_mean_collapsed_Pos = TAB_mean_red_Pos %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, PosLev.Conservation_2, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
TAB_mean_collapsed_Pos = as.data.frame(TAB_mean_collapsed_Pos)
## Create collapsed table 4.
TAB_mean_red_Mot = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "MotLev.Mode", "MotLev.Width", "MotLev.Meme_Motif.Identifier")]
TAB_mean_red_Mot$"MotLev.Meme_Motif.Presence_Ausence" = ifelse(!is.na(TAB_mean_red_Mot$MotLev.Meme_Motif.Identifier), "Presence", "Ausence")
TAB_mean_red_Mot = TAB_mean_red_Mot[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "MotLev.Mode", "MotLev.Width", "MotLev.Meme_Motif.Presence_Ausence")]
TAB_mean_red_Mot = TAB_mean_red_Mot[!duplicated(TAB_mean_red_Mot),]
TAB_mean_red_Mot$MotLev.Meme_Motif.Presence_Ausence = factor(TAB_mean_red_Mot$MotLev.Meme_Motif.Presence_Ausence, levels = c("Presence", "Ausence"))
TAB_mean_collapsed_Mot = TAB_mean_red_Mot %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, MotLev.Mode, MotLev.Width, MotLev.Meme_Motif.Presence_Ausence, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, Type, MotLev.Mode, MotLev.Width, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
TAB_mean_collapsed_Mot = as.data.frame(TAB_mean_collapsed_Mot)
View(TAB_mean_collapsed_SeqB)
## Create collapsed table 1.
TAB_mean_red_SeqB = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "SeqLev.Blastn.Conservation_1", "SeqLev.Blastn.Conservation_2", "SeqLev.Blastn.Conservation_3", "SeqLev.Blastn.Family")]
TAB_mean_red_SeqB = TAB_mean_red_SeqB[!duplicated(TAB_mean_red_SeqB),]
TAB_mean_collapsed_SeqB = TAB_mean_red_SeqB %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, SeqLev.Blastn.Conservation_2, Type, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, SeqLev.Blastn.Conservation_2, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
TAB_mean_collapsed_SeqB = as.data.frame(TAB_mean_collapsed_SeqB)
## Create collapsed table 2.
TAB_mean_red_SeqOF = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "SeqLev.OF.Conservation_1", "SeqLev.OF.Conservation_2", "SeqLev.OF.Conservation_3", "SeqLev.OF.Family")]
TAB_mean_red_SeqOF = TAB_mean_red_SeqOF[!duplicated(TAB_mean_red_SeqOF),]
TAB_mean_collapsed_SeqOF = TAB_mean_red_SeqOF %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, SeqLev.OF.Conservation_2, Type, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, SeqLev.OF.Conservation_2, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
TAB_mean_collapsed_SeqOF = as.data.frame(TAB_mean_collapsed_SeqOF)
## Create collapsed table 3.
TAB_mean_red_Pos = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "PosLev.Conservation_1", "PosLev.Conservation_2", "PosLev.Conservation_3", "PosLev.Family")]
TAB_mean_red_Pos = TAB_mean_red_Pos[!duplicated(TAB_mean_red_Pos),]
TAB_mean_collapsed_Pos = TAB_mean_red_Pos %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, PosLev.Conservation_2, Type, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, PosLev.Conservation_2, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
TAB_mean_collapsed_Pos = as.data.frame(TAB_mean_collapsed_Pos)
## Create collapsed table 4.
TAB_mean_red_Mot = TAB_mean[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "MotLev.Mode", "MotLev.Width", "MotLev.Meme_Motif.Identifier")]
TAB_mean_red_Mot$"MotLev.Meme_Motif.Presence_Ausence" = ifelse(!is.na(TAB_mean_red_Mot$MotLev.Meme_Motif.Identifier), "Presence", "Ausence")
TAB_mean_red_Mot = TAB_mean_red_Mot[,c("Spe", "SRA.Study", "ID_transcript", "Comparison", "Confidence", "Class_code", "TAU", "Type", "MotLev.Mode", "MotLev.Width", "MotLev.Meme_Motif.Presence_Ausence")]
TAB_mean_red_Mot = TAB_mean_red_Mot[!duplicated(TAB_mean_red_Mot),]
TAB_mean_red_Mot$MotLev.Meme_Motif.Presence_Ausence = factor(TAB_mean_red_Mot$MotLev.Meme_Motif.Presence_Ausence, levels = c("Presence", "Ausence"))
TAB_mean_collapsed_Mot = TAB_mean_red_Mot %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, MotLev.Mode, MotLev.Width, MotLev.Meme_Motif.Presence_Ausence, Type, .drop=FALSE) %>%
summarise(Counts = n_distinct(ID_transcript)) %>%
group_by(Spe, SRA.Study, Comparison, Confidence, Class_code, MotLev.Mode, MotLev.Width, MotLev.Meme_Motif.Presence_Ausence, .drop=FALSE) %>%
mutate(Percent = (100*Counts)/sum(Counts))
TAB_mean_collapsed_Mot = as.data.frame(TAB_mean_collapsed_Mot)
View(TAB_mean_collapsed_SeqB)
View(TAB_mean_collapsed_Pos)
View(TAB_mean)
View(TAB_mean_collapsed_Mot)
