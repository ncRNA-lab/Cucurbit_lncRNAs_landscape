All_IR$transcript_id = paste0("Reg_", All_IR$transcript_id)
All_IR$"Type" = "Intergenic Region"
ALL = rbind(All_genes, All_lncRNAs, All_IR)
### Join all the info ALL and RES.
TAB = merge(ALL, RES[,c("transcript_id", "Repeat_id", "Repeat_type_1", "Repeat_type_2")], by = "transcript_id", all.x = T, all.y = F)
### Convert all NA values to No_overlap. They are the genes, lncRNAs and IR which haven't overlap on some repeat region.
TAB[is.na(TAB)] = "No repeat"
### Modify the Repeat_type_2 values to make easier the downstream analysis.
TAB$"Repeat_type_2_mod" = ifelse(grepl("LINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("SINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("LTR", TAB$Repeat_type_2, fixed = T), "LTR",
ifelse(grepl("DNA/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(grepl("RC/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(TAB$Repeat_type_2 == "Simple_repeat", "Simple repeat",
ifelse(TAB$Repeat_type_2 == "Low_complexity", "Low complexity repeat",
ifelse(TAB$Repeat_type_2 == "No repeat", "No repeat",
"Unknown"))))))))
### Add class code info to the table. u (intergenic), x (antisense), i (intronic), o/e (sense), pc (protein coding) and ir (intergenic region).
TAB = merge(TAB, LncRNAs_db[,c("ID_transcript", "Class_code")], by.x = "transcript_id", by.y = "ID_transcript", all.x = T, all.y = F)
TAB$Class_code = ifelse(TAB$Type == "Protein Coding", "pc", ifelse(TAB$Type == "Intergenic Region", "ir", TAB$Class_code))
TAB[TAB == "o"] = "o/e"
TAB[TAB == "e"] = "o/e"
### Create factor classes.
TAB$Class_code = factor(TAB$Class_code, levels = c("pc", "u", "x", "i", "o/e", "ir"))
TAB$Repeat_type_2_mod = factor(TAB$Repeat_type_2_mod, levels = c("Simple repeat", "Low complexity repeat", "LINE/SINE",
"LTR", "DNA transposon", "Unknown", "No repeat"))
TAB = TAB[order(TAB$Class_code),]
### Add specie info.
TAB$"spe" = spe
## Join TAB to the TAB_FINAL table.
TAB_FINAL = rbind(TAB_FINAL, TAB)
}
View(TAB_FINAL)
View(TAB_FINAL)
cat("\nCreating the FINAL table...\n")
TAB_FINAL = data.frame()
for (spe in species) {
cat(paste0("\t", spe, "...\n"))
### Paths.
WD_01 = paste0(path_res, "/11-TEs_and_genomic_repeats/", folder_new)
WD_02 = paste0(path_res, "/05-predict_lncRNAs")
### Directory.
if (!dir.exists(paste0(WD_01, "/Figures_and_Tables"))){
dir.create(paste0(WD_01, "/Figures_and_Tables"))
}
if (!dir.exists(paste0(WD_01, "/Figures_and_Tables/A"))){
dir.create(paste0(WD_01, "/Figures_and_Tables/A"))
}
### Genes, LncRNAs and IR intersected with Repeat regions.
res_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_genes) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
if (flag == "NR") {
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep_NR.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
}
if (flag == "R") {
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep_R.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
}
res_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_IR) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR$transcript_id = paste0(res_IR$chr, ":", res_IR$start, "-", res_IR$end, "(", res_IR$strand, ")")
RES = rbind(res_genes, res_lncRNAs, res_IR)
### Remove intersections with small RNAs.
RES = RES[!(RES$Repeat_type_2 %in% c("rRNA", "tRNA", "snRNA", "snoRNA")),]
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
All_genes = All_genes[,c(1:4,6)]
colnames(All_genes) = c("chr", "start", "end", "transcript_id", "strand")
All_genes$"Type" = "Protein Coding"
if (flag == "NR") {
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred_NR.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == confidence,]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
}
if (flag == "R") {
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred_R.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == confidence,]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
}
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
All_IR = All_IR[,c(1:4,6)]
colnames(All_IR) = c("chr", "start", "end", "transcript_id", "strand")
All_IR$transcript_id = paste0("Reg_", All_IR$transcript_id)
All_IR$"Type" = "Intergenic Region"
ALL = rbind(All_genes, All_lncRNAs, All_IR)
### Join all the info ALL and RES.
TAB = merge(ALL, RES[,c("transcript_id", "Repeat_id", "Repeat_type_1", "Repeat_type_2")], by = "transcript_id", all.x = T, all.y = F)
### Convert all NA values to No_overlap. They are the genes, lncRNAs and IR which haven't overlap on some repeat region.
TAB[is.na(TAB)] = "No repeat"
### Modify the Repeat_type_2 values to make easier the downstream analysis.
TAB$"Repeat_type_2_mod" = ifelse(grepl("LINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("SINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("LTR", TAB$Repeat_type_2, fixed = T), "LTR",
ifelse(grepl("DNA/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(grepl("RC/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(TAB$Repeat_type_2 == "Simple_repeat", "Simple repeat",
ifelse(TAB$Repeat_type_2 == "Low_complexity", "Low complexity repeat",
ifelse(TAB$Repeat_type_2 == "No repeat", "No repeat",
"Unknown"))))))))
### Add class code info to the table. u (intergenic), x (antisense), i (intronic), o/e (sense), pc (protein coding) and ir (intergenic region).
TAB = merge(TAB, LncRNAs_db[,c("ID_transcript", "Class_code")], by.x = "transcript_id", by.y = "ID_transcript", all.x = T, all.y = F)
TAB$Class_code = ifelse(TAB$Type == "Protein Coding", "pc", ifelse(TAB$Type == "Intergenic Region", "ir", TAB$Class_code))
TAB[TAB == "o"] = "o/e"
TAB[TAB == "e"] = "o/e"
### Create factor classes.
TAB$Class_code = factor(TAB$Class_code, levels = c("pc", "u", "x", "i", "o/e", "ir"))
TAB$Repeat_type_2_mod = factor(TAB$Repeat_type_2_mod, levels = c("Simple repeat", "Low complexity repeat", "LINE/SINE",
"LTR", "DNA transposon", "Unknown", "No repeat"))
TAB = TAB[order(TAB$Class_code),]
### Add specie info.
TAB$"spe" = spe
## Join TAB to the TAB_FINAL table.
TAB_FINAL = rbind(TAB_FINAL, TAB)
}
rm(list = c("TAB"))
cat("\nCreating the SUMMARY table...\n")
### Convert spe to factor.
TAB_FINAL$spe = factor(TAB_FINAL$spe, levels = species)
### Create a temporal FINAL TABLE to remove the redundancy. I mean, a transcript which overlap with
### the same kind of repeat several times because you can find this repeat sequence in several genome positions.
TAB_FINAL_temp = TAB_FINAL[, c("transcript_id", "Class_code", "Repeat_type_2_mod", "spe")]
rm(list = c("TAB", "ALL", "All_genes", "All_IR", "All_lncRNAs", "LncRNAs_db", "RES",
"res_genes", "res_IR", "res_lncRNAs"))
rm(list = c("TAB", "ALL", "All_genes", "All_IR", "All_lncRNAs", "LncRNAs_db", "RES",
"res_genes", "res_IR", "res_lncRNAs", "spe"))
View(TAB_FINAL_temp)
TAB_FINAL_temp = TAB_FINAL_temp[!duplicated(TAB_FINAL_temp),]
### Create summary table.
TAB_FINAL_temp$"Counts" = 1
TAB_SUMMARY_temp = TAB_FINAL_temp %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = sum(Counts))
TAB_SUMMARY_temp = as.data.frame(TAB_SUMMARY_temp)
### Add total number of unique transcripts.
c = 1
for (spe in species) {
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
Total_genes = dim(All_genes)[1]
if (flag == "NR") {
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == confidence,]
}
if (flag == "R") {
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == confidence,]
}
Total_u = dim(LncRNAs_db[LncRNAs_db$Class_code == "u",])[1]
Total_x = dim(LncRNAs_db[LncRNAs_db$Class_code == "x",])[1]
Total_i = dim(LncRNAs_db[LncRNAs_db$Class_code == "i",])[1]
Total_oe = dim(LncRNAs_db[LncRNAs_db$Class_code == "o" | LncRNAs_db$Class_code == "e",])[1]
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
Total_IR = dim(All_IR)[1]
### Add total info.
pc = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "pc",]
pc$"Total" = Total_genes
u = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "u",]
u$"Total" = Total_u
x = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "x",]
x$"Total" = Total_x
i = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "i",]
i$"Total" = Total_i
oe = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "o/e",]
oe$"Total" = Total_oe
ir = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "ir",]
ir$"Total" = Total_IR
### Join the results.
temp = rbind(pc,u,x,i,oe,ir)
if (c == 1) {
TAB_SUMMARY = temp
} else {
TAB_SUMMARY = rbind(TAB_SUMMARY, temp)
}
c = c + 1
}
### Get percentage.
TAB_SUMMARY$"Percentage" = round((TAB_SUMMARY$sum.Counts*100)/TAB_SUMMARY$Total, 1)
View(TAB_SUMMARY)
TAB_SUMMARY_prueba = TAB_FINAL_temp %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = sum(Counts)) %>%
mutate(Total = length(unique(transcript_id)),
perc = round(sum.Counts/length(unique(transcript_id)) * 100, 2))
TAB_SUMMARY_prueba = as.data.frame(TAB_SUMMARY_prueba)
TAB_SUMMARY_prueba = TAB_FINAL_temp %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = sum(Counts),
Total = length(unique(transcript_id))) %>%
mutate(perc = round(sum.Counts/length(unique(transcript_id)) * 100, 2))
TAB_SUMMARY_prueba = as.data.frame(TAB_SUMMARY_prueba)
TAB_SUMMARY_prueba = TAB_FINAL_temp %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = sum(Counts),
Total = length(unique(transcript_id))) %>%
mutate(perc = round(sum.Counts/Total * 100, 2))
TAB_SUMMARY_prueba = as.data.frame(TAB_SUMMARY_prueba)
View(TAB_SUMMARY_prueba)
TAB_SUMMARY_prueba = TAB_FINAL_temp %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = sum(Counts),
Total = n_distinct(transcript_id)) %>%
mutate(perc = round(sum.Counts/Total * 100, 2))
TAB_SUMMARY_prueba = as.data.frame(TAB_SUMMARY_prueba)
TAB_SUMMARY_prueba = TAB_FINAL_temp %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = n_distinct(transcript_id)) %>%
mutate(perc = round(sum.Counts/sum(sum.Counts) * 100, 2))
TAB_SUMMARY_prueba = as.data.frame(TAB_SUMMARY_prueba)
TAB_SUMMARY_prueba = TAB_FINAL %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = n_distinct(transcript_id)) %>%
mutate(perc = round(sum.Counts/sum(sum.Counts) * 100, 2))
TAB_SUMMARY_prueba = as.data.frame(TAB_SUMMARY_prueba)
TAB_SUMMARY_prueba = TAB_FINAL %>%
group_by(spe, Class_code, .drop=FALSE) %>%
summarise(
sum.Counts = n_distinct(transcript_id))
TAB_SUMMARY_individual = TAB_FINAL %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(sum.Counts = n_distinct(transcript_id))
TAB_SUMMARY_individual = as.data.frame(TAB_SUMMARY_individual)
TAB_SUMMARY_total = TAB_FINAL %>%
group_by(spe, Class_code, .drop=FALSE) %>%
summarise(Total = n_distinct(transcript_id))
TAB_SUMMARY_total = as.data.frame(TAB_SUMMARY_total)
TAB_SUMMARY_prueba = merge(TAB_SUMMARY_individual, TAB_SUMMARY_total, by = c("spe", "Class_code"), all = T)
TAB_SUMMARY = merge(TAB_SUMMARY_individual, TAB_SUMMARY_total, by = c("spe", "Class_code"), all = T)
### Get percentage.
TAB_SUMMARY$"Percentage" = round((TAB_SUMMARY$sum.Counts*100)/TAB_SUMMARY$Total, 1)
### Add percentage masked genome.
masked_perc = read.table(paste0(path_res, "/11-TEs_and_genomic_repeats/01-Repeat_calling/", folder_RepMask, "/masked_genome_percentage.tsv"), header = T, sep = "\t", quote = "\"")
TAB_SUMMARY = merge(TAB_SUMMARY, masked_perc, by = "spe", all = T)
TAB_SUMMARY_1 = TAB_SUMMARY
TAB_SUMMARY_2 = TAB_SUMMARY[TAB_SUMMARY$Repeat_type_2_mod == "No repeat", c("spe", "Class_code", "Percentage")]
colnames(TAB_SUMMARY_2) = c("spe", "Class_code", "No_repeat")
TAB_SUMMARY_2$Repeat = 100 - TAB_SUMMARY_2$No_repeat
TAB_SUMMARY_2$No_repeat = NULL
TAB_SUMMARY = TAB_SUMMARY[order(TAB_SUMMARY$spe, TAB_SUMMARY$Class_code, TAB_SUMMARY$Repeat_type_2_mod),]
path_res = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results"
folder_new = "02-Comparison_Genes_LncRNAs"
folder_RepMask = "05-RepeatMasker"
flag = "NR"
confidence = "High"
## 2. PIPELINE
# Species
species = c("csa", "cme", "cla", "lsi", "cmo", "car", "cpe", "cma", "mch")
species_name = c("C. sativus", "C. melo", "C. lanatus", "L. siceraria", "C. moschata", "C. argyrosperma", "C. pepo", "C. maxima", "M. charantia")
species_tab = data.frame(spe = species, name = species_name)
### 2.1 CREATE FINAL TABLE
cat("\nCreating the FINAL table...\n")
TAB_FINAL = data.frame()
for (spe in species) {
cat(paste0("\t", spe, "...\n"))
### Paths.
WD_01 = paste0(path_res, "/11-TEs_and_genomic_repeats/", folder_new)
WD_02 = paste0(path_res, "/05-predict_lncRNAs")
### Directory.
if (!dir.exists(paste0(WD_01, "/Figures_and_Tables"))){
dir.create(paste0(WD_01, "/Figures_and_Tables"))
}
if (!dir.exists(paste0(WD_01, "/Figures_and_Tables/A"))){
dir.create(paste0(WD_01, "/Figures_and_Tables/A"))
}
### Genes, LncRNAs and IR intersected with Repeat regions.
res_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_genes) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
if (flag == "NR") {
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep_NR.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
}
if (flag == "R") {
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep_R.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
}
res_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_IR) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR$transcript_id = paste0(res_IR$chr, ":", res_IR$start, "-", res_IR$end, "(", res_IR$strand, ")")
RES = rbind(res_genes, res_lncRNAs, res_IR)
### Remove intersections with small RNAs.
RES = RES[!(RES$Repeat_type_2 %in% c("rRNA", "tRNA", "snRNA", "snoRNA")),]
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
All_genes = All_genes[,c(1:4,6)]
colnames(All_genes) = c("chr", "start", "end", "transcript_id", "strand")
All_genes$"Type" = "Protein Coding"
if (flag == "NR") {
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred_NR.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == confidence,]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
}
if (flag == "R") {
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred_R.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == confidence,]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
}
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
All_IR = All_IR[,c(1:4,6)]
colnames(All_IR) = c("chr", "start", "end", "transcript_id", "strand")
All_IR$transcript_id = paste0("Reg_", All_IR$transcript_id)
All_IR$"Type" = "Intergenic Region"
ALL = rbind(All_genes, All_lncRNAs, All_IR)
### Join all the info ALL and RES.
TAB = merge(ALL, RES[,c("transcript_id", "Repeat_id", "Repeat_type_1", "Repeat_type_2")], by = "transcript_id", all.x = T, all.y = F)
### Convert all NA values to No_overlap. They are the genes, lncRNAs and IR which haven't overlap on some repeat region.
TAB[is.na(TAB)] = "No repeat"
### Modify the Repeat_type_2 values to make easier the downstream analysis.
TAB$"Repeat_type_2_mod" = ifelse(grepl("LINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("SINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("LTR", TAB$Repeat_type_2, fixed = T), "LTR",
ifelse(grepl("DNA/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(grepl("RC/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(TAB$Repeat_type_2 == "Simple_repeat", "Simple repeat",
ifelse(TAB$Repeat_type_2 == "Low_complexity", "Low complexity repeat",
ifelse(TAB$Repeat_type_2 == "No repeat", "No repeat",
"Unknown"))))))))
### Add class code info to the table. u (intergenic), x (antisense), i (intronic), o/e (sense), pc (protein coding) and ir (intergenic region).
TAB = merge(TAB, LncRNAs_db[,c("ID_transcript", "Class_code")], by.x = "transcript_id", by.y = "ID_transcript", all.x = T, all.y = F)
TAB$Class_code = ifelse(TAB$Type == "Protein Coding", "pc", ifelse(TAB$Type == "Intergenic Region", "ir", TAB$Class_code))
TAB[TAB == "o"] = "o/e"
TAB[TAB == "e"] = "o/e"
### Create factor classes.
TAB$Class_code = factor(TAB$Class_code, levels = c("pc", "u", "x", "i", "o/e", "ir"))
TAB$Repeat_type_2_mod = factor(TAB$Repeat_type_2_mod, levels = c("Simple repeat", "Low complexity repeat", "LINE/SINE",
"LTR", "DNA transposon", "Unknown", "No repeat"))
TAB = TAB[order(TAB$Class_code),]
### Add specie info.
TAB$"spe" = spe
## Join TAB to the TAB_FINAL table.
TAB_FINAL = rbind(TAB_FINAL, TAB)
}
cat("\nCreating the SUMMARY table...\n")
### Convert spe to factor.
TAB_FINAL$spe = factor(TAB_FINAL$spe, levels = species)
### Create summary table. Use n_distinct() to remove the redundancy. I mean, a transcript which overlap with
### the same kind of repeat several times because you can find this repeat sequence in several genome positions.
TAB_SUMMARY_individual = TAB_FINAL %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(sum.Counts = n_distinct(transcript_id))
TAB_SUMMARY_individual = as.data.frame(TAB_SUMMARY_individual)
TAB_SUMMARY_total = TAB_FINAL %>%
group_by(spe, Class_code, .drop=FALSE) %>%
summarise(Total = n_distinct(transcript_id))
TAB_SUMMARY_total = as.data.frame(TAB_SUMMARY_total)
TAB_SUMMARY = merge(TAB_SUMMARY_individual, TAB_SUMMARY_total, by = c("spe", "Class_code"), all = T)
TAB_SUMMARY = TAB_SUMMARY[order(TAB_SUMMARY$spe, TAB_SUMMARY$Class_code, TAB_SUMMARY$Repeat_type_2_mod),]
### Get percentage.
TAB_SUMMARY$"Percentage" = round((TAB_SUMMARY$sum.Counts*100)/TAB_SUMMARY$Total, 1)
### Add percentage masked genome.
masked_perc = read.table(paste0(path_res, "/11-TEs_and_genomic_repeats/01-Repeat_calling/", folder_RepMask, "/masked_genome_percentage.tsv"), header = T, sep = "\t", quote = "\"")
TAB_SUMMARY = merge(TAB_SUMMARY, masked_perc, by = "spe", all = T)
### Subdivide in two tables.
TAB_SUMMARY_1 = TAB_SUMMARY
TAB_SUMMARY_2 = TAB_SUMMARY[TAB_SUMMARY$Repeat_type_2_mod == "No repeat", c("spe", "Class_code", "Percentage")]
colnames(TAB_SUMMARY_2) = c("spe", "Class_code", "No_repeat")
TAB_SUMMARY_2$Repeat = 100 - TAB_SUMMARY_2$No_repeat
TAB_SUMMARY_2$No_repeat = NULL
### Remove variables.
rm(list = c("ALL", "All_genes", "All_IR", "All_lncRNAs", "LncRNAs_db", "RES", "res_genes",
"res_IR", "res_lncRNAs", "spe", "TAB", "WD_02", "TAB_SUMMARY_total",
"TAB_SUMMARY_individual", "masked_perc", "TAB_SUMMARY"))
TAB_SUMMARY_1 = merge(TAB_SUMMARY_1, species_tab, by = "spe", all.x = T, all.y = F)
TAB_SUMMARY_1$name = factor(TAB_SUMMARY_1$name, levels = species_name)
TAB_SUMMARY_1 = TAB_SUMMARY_1[order(TAB_SUMMARY_1$name),]
TAB_SUMMARY_1$"facet" = paste0(TAB_SUMMARY_1$name, " (", TAB_SUMMARY_1$masked_perc, "%)")
TAB_SUMMARY_1$facet = factor(TAB_SUMMARY_1$facet, levels = unique(TAB_SUMMARY_1$facet))
View(TAB_SUMMARY_1)
View(TAB_FINAL)
View(TAB_SUMMARY_1)
# Species
species = c("csa", "cme", "cla", "lsi", "cmo", "car", "cpe", "cma", "mch")
species_name = c("C. sativus", "C. melo", "C. lanatus", "L. siceraria", "C. moschata", "C. argyrosperma", "C. pepo", "C. maxima", "M. charantia")
species_tab = data.frame(spe = species, name = species_name)
### 2.1 CREATE FINAL TABLE
cat("\nCreating the FINAL table...\n")
TAB_FINAL = data.frame()
for (spe in species) {
cat(paste0("\t", spe, "...\n"))
### Paths.
WD_01 = paste0(path_res, "/11-TEs_and_genomic_repeats/", folder_new)
WD_02 = paste0(path_res, "/05-predict_lncRNAs")
### Directory.
if (!dir.exists(paste0(WD_01, "/Figures_and_Tables"))){
dir.create(paste0(WD_01, "/Figures_and_Tables"))
}
if (!dir.exists(paste0(WD_01, "/Figures_and_Tables/A"))){
dir.create(paste0(WD_01, "/Figures_and_Tables/A"))
}
### Genes, LncRNAs and IR intersected with Repeat regions.
res_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_genes) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
if (flag == "NR") {
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep_NR.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
}
if (flag == "R") {
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep_R.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
}
res_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_IR) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR$transcript_id = paste0(res_IR$chr, ":", res_IR$start, "-", res_IR$end, "(", res_IR$strand, ")")
RES = rbind(res_genes, res_lncRNAs, res_IR)
### Remove intersections with small RNAs.
RES = RES[!(RES$Repeat_type_2 %in% c("rRNA", "tRNA", "snRNA", "snoRNA")),]
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
All_genes = All_genes[,c(1:4,6)]
colnames(All_genes) = c("chr", "start", "end", "transcript_id", "strand")
All_genes$"Type" = "Protein Coding"
if (flag == "NR") {
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred_NR.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == confidence,]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
}
if (flag == "R") {
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred_R.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == confidence,]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
}
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
All_IR = All_IR[,c(1:4,6)]
colnames(All_IR) = c("chr", "start", "end", "transcript_id", "strand")
All_IR$transcript_id = paste0(All_IR$chr, ":", All_IR$start, "-", All_IR$end, "(", All_IR$strand, ")")
All_IR$"Type" = "Intergenic Region"
ALL = rbind(All_genes, All_lncRNAs, All_IR)
### Join all the info ALL and RES.
TAB = merge(ALL, RES[,c("transcript_id", "Repeat_id", "Repeat_type_1", "Repeat_type_2")], by = "transcript_id", all.x = T, all.y = F)
### Convert all NA values to No_overlap. They are the genes, lncRNAs and IR which haven't overlap on some repeat region.
TAB[is.na(TAB)] = "No repeat"
### Modify the Repeat_type_2 values to make easier the downstream analysis.
TAB$"Repeat_type_2_mod" = ifelse(grepl("LINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("SINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("LTR", TAB$Repeat_type_2, fixed = T), "LTR",
ifelse(grepl("DNA/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(grepl("RC/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(TAB$Repeat_type_2 == "Simple_repeat", "Simple repeat",
ifelse(TAB$Repeat_type_2 == "Low_complexity", "Low complexity repeat",
ifelse(TAB$Repeat_type_2 == "No repeat", "No repeat",
"Unknown"))))))))
### Add class code info to the table. u (intergenic), x (antisense), i (intronic), o/e (sense), pc (protein coding) and ir (intergenic region).
TAB = merge(TAB, LncRNAs_db[,c("ID_transcript", "Class_code")], by.x = "transcript_id", by.y = "ID_transcript", all.x = T, all.y = F)
TAB$Class_code = ifelse(TAB$Type == "Protein Coding", "pc", ifelse(TAB$Type == "Intergenic Region", "ir", TAB$Class_code))
TAB[TAB == "o"] = "o/e"
TAB[TAB == "e"] = "o/e"
### Create factor classes.
TAB$Class_code = factor(TAB$Class_code, levels = c("pc", "u", "x", "i", "o/e", "ir"))
TAB$Repeat_type_2_mod = factor(TAB$Repeat_type_2_mod, levels = c("Simple repeat", "Low complexity repeat", "LINE/SINE",
"LTR", "DNA transposon", "Unknown", "No repeat"))
TAB = TAB[order(TAB$Class_code),]
### Add specie info.
TAB$"spe" = spe
## Join TAB to the TAB_FINAL table.
TAB_FINAL = rbind(TAB_FINAL, TAB)
}
### Convert spe to factor.
TAB_FINAL$spe = factor(TAB_FINAL$spe, levels = species)
### Create summary table. Use n_distinct() to remove the redundancy. I mean, a transcript which overlap with
### the same kind of repeat several times because you can find this repeat sequence in several genome positions.
TAB_SUMMARY_individual = TAB_FINAL %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(sum.Counts = n_distinct(transcript_id))
TAB_SUMMARY_individual = as.data.frame(TAB_SUMMARY_individual)
TAB_SUMMARY_total = TAB_FINAL %>%
group_by(spe, Class_code, .drop=FALSE) %>%
summarise(Total = n_distinct(transcript_id))
TAB_SUMMARY_total = as.data.frame(TAB_SUMMARY_total)
TAB_SUMMARY = merge(TAB_SUMMARY_individual, TAB_SUMMARY_total, by = c("spe", "Class_code"), all = T)
TAB_SUMMARY = TAB_SUMMARY[order(TAB_SUMMARY$spe, TAB_SUMMARY$Class_code, TAB_SUMMARY$Repeat_type_2_mod),]
### Get percentage.
TAB_SUMMARY$"Percentage" = round((TAB_SUMMARY$sum.Counts*100)/TAB_SUMMARY$Total, 1)
### Add percentage masked genome.
masked_perc = read.table(paste0(path_res, "/11-TEs_and_genomic_repeats/01-Repeat_calling/", folder_RepMask, "/masked_genome_percentage.tsv"), header = T, sep = "\t", quote = "\"")
TAB_SUMMARY = merge(TAB_SUMMARY, masked_perc, by = "spe", all = T)
### Subdivide in two tables.
TAB_SUMMARY_1 = TAB_SUMMARY
TAB_SUMMARY_2 = TAB_SUMMARY[TAB_SUMMARY$Repeat_type_2_mod == "No repeat", c("spe", "Class_code", "Percentage")]
colnames(TAB_SUMMARY_2) = c("spe", "Class_code", "No_repeat")
TAB_SUMMARY_2$Repeat = 100 - TAB_SUMMARY_2$No_repeat
TAB_SUMMARY_2$No_repeat = NULL
View(TAB_FINAL)
