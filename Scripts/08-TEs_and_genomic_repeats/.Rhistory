ifelse(grepl("LTR", TAB$Repeat_type_2, fixed = T), "LTR",
ifelse(TAB$Repeat_type_2 == "Simple_repeat", "Simple repeat",
ifelse(TAB$Repeat_type_2 == "Unknown", "Unknown",
ifelse(grepl("DNA/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(TAB$Repeat_type_2 == "Low_complexity", "Low complexity repeat",
ifelse(grepl("RC/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
"No overlap"))))))))
### Add class code info to the table. u (intergenic), x (antisense), i (intronic), o/e (sense), pc (protein coding) and ir (intergenic region).
TAB = merge(TAB, LncRNAs_db[,c("ID_transcript", "Class_code")], by.x = "transcript_id", by.y = "ID_transcript", all.x = T, all.y = F)
TAB$Class_code = ifelse(TAB$Type == "Protein Coding", "pc", ifelse(TAB$Type == "Intergenic Region", "ir", TAB$Class_code))
TAB[TAB == "o"] = "o/e"
TAB[TAB == "e"] = "o/e"
### Create factor classes.
TAB$Class_code = factor(TAB$Class_code, levels = c("pc", "u", "x", "i", "o/e", "ir"))
TAB$Repeat_type_2_mod = factor(TAB$Repeat_type_2_mod, levels = c("Simple repeat", "Low complexity repeat", "SINE",
"LINE", "LTR", "DNA transposon", "Unknown", "No overlap"))
### Add specie info.
TAB$"spe" = spe
## Join TAB to the TAB_FINAL table.
if (c == 1) {
TAB_FINAL = TAB
} else {
TAB_FINAL = rbind(TAB_FINAL, TAB)
}
c = c + 1
}
## 3. CREATE SUMMARY TABLE
cat("\nCreating the SUMMARY table...\n")
### Convert spe to factor.
TAB_FINAL$spe = factor(TAB_FINAL$spe, levels = species)
### Create a temporal FINAL TABLE to remove the redundancy. I mean, a transcript which overlap with
### the same kind of repeat several times because you can find this repeat sequence in several genome positions.
TAB_FINAL_temp = TAB_FINAL[, c("transcript_id", "Class_code", "Repeat_type_2_mod", "spe")]
TAB_FINAL_temp = TAB_FINAL_temp[!duplicated(TAB_FINAL_temp),]
### Create summary table.
TAB_FINAL_temp$"Counts" = 1
TAB_SUMMARY_temp = TAB_FINAL_temp %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = sum(Counts))
TAB_SUMMARY_temp = as.data.frame(TAB_SUMMARY_temp)
### Add total number of unique transcripts.
c = 1
for (spe in species) {
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
Total_genes = dim(All_genes)[1]
#LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == "High",]
Total_u = dim(LncRNAs_db[LncRNAs_db$Class_code == "u",])[1]
Total_x = dim(LncRNAs_db[LncRNAs_db$Class_code == "x",])[1]
Total_i = dim(LncRNAs_db[LncRNAs_db$Class_code == "i",])[1]
Total_oe = dim(LncRNAs_db[LncRNAs_db$Class_code == "o" | LncRNAs_db$Class_code == "e",])[1]
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
Total_IR = dim(All_IR)[1]
### Add total info.
pc = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "pc",]
pc$"Total" = Total_genes
u = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "u",]
u$"Total" = Total_u
x = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "x",]
x$"Total" = Total_x
i = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "i",]
i$"Total" = Total_i
oe = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "o/e",]
oe$"Total" = Total_oe
ir = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "ir",]
ir$"Total" = Total_IR
### Join the results.
temp = rbind(pc,u,x,i,oe,ir)
if (c == 1) {
TAB_SUMMARY = temp
} else {
TAB_SUMMARY = rbind(TAB_SUMMARY, temp)
}
c = c + 1
}
### Get percentage.
TAB_SUMMARY$"Percentage" = round((TAB_SUMMARY$sum.Counts*100)/TAB_SUMMARY$Total, 1)
### Add percentage masked genome.
masked_perc = read.table(paste0(path_res, "/11-TEs_and_genomic_repeats/01-Repeat_calling/02-RepeatMasker/masked_genome_percentage.tsv"), header = T, sep = "\t", quote = "\"")
TAB_SUMMARY = merge(TAB_SUMMARY, masked_perc, by = "spe", all = T)
### Remove variables.
rm(list = c("ALL", "All_genes", "All_IR", "All_lncRNAs", "LncRNAs_db", "RES",
"res_genes", "res_IR", "res_lncRNAs", "spe", "TAB", "WD_02", "c",
"TAB_FINAL_temp", "TAB_SUMMARY_temp", "pc", "u", "x", "i", "oe",
"ir", "Total_genes", "Total_u", "Total_x", "Total_i", "Total_oe",
"Total_IR", "temp", "masked_perc"))
## 4. FIGURE
cat("\nDrawing the SUMMARY table...")
TAB_SUMMARY$"facet" = paste0(TAB_SUMMARY$spe, " (", TAB_SUMMARY$masked_perc, "%)")
gg = ggplot(TAB_SUMMARY, aes(x = Repeat_type_2_mod, y = Percentage, fill = Repeat_type_2_mod)) +
geom_bar(position=position_dodge(), aes(y=Percentage), stat="identity") +
facet_grid(facet ~ Class_code) +
scale_fill_manual(values = c("#bc3c29", "#0072b5", "#e18727", "#20854e", "#7876b1", "#6f99ad", "#ffdc91", "#efc000")) +
scale_y_continuous(limits = c(0, 75), breaks = seq(0, 75, by = 10), expand = c(0.02, 5)) +
xlab("") +
ylab("Percentage (%)") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(axis.text.x = element_text(vjust = 0.5, hjust=0.5, angle = 80)) +
theme(legend.position = "none") +
geom_text(aes(label=paste0(Percentage, "\n(", sum.Counts,")")), vjust=-0.2, size = 2)
ggsave(paste0(WD_01, "/Percentage_repeat_strandness_2_r.png"), height = 16, width = 12, dpi = 600)
rm(list = c("gg"))
View(TAB_SUMMARY)
View(TAB_FINAL)
spe = "car"
path_res = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results"
species = c("car", "cla", "cma", "cme", "cmo", "cpe", "csa", "lsi", "mch")
c = 1
### Genes, LncRNAs and IR intersected with Repeat regions.
res_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_genes) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_IR) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR$transcript_id = paste0("Reg_", res_IR$transcript_id)
RES = rbind(res_genes, res_lncRNAs, res_IR)
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
All_genes = All_genes[,c(1:4,6)]
colnames(All_genes) = c("chr", "start", "end", "transcript_id", "strand")
All_genes$"Type" = "Protein Coding"
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
#LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == "High",]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
All_IR = All_IR[,c(1:4,6)]
colnames(All_IR) = c("chr", "start", "end", "transcript_id", "strand")
All_IR$transcript_id = paste0("Reg_", All_IR$transcript_id)
All_IR$"Type" = "Intergenic Region"
ALL = rbind(All_genes, All_lncRNAs, All_IR)
WD_01 = paste0(path_res, "/11-TEs_and_genomic_repeats/02-Comparison_Genes_LncRNAs")
WD_02 = paste0(path_res, "/05-predict_lncRNAs")
### Genes, LncRNAs and IR intersected with Repeat regions.
res_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_genes) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_IR) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR$transcript_id = paste0("Reg_", res_IR$transcript_id)
RES = rbind(res_genes, res_lncRNAs, res_IR)
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
All_genes = All_genes[,c(1:4,6)]
colnames(All_genes) = c("chr", "start", "end", "transcript_id", "strand")
All_genes$"Type" = "Protein Coding"
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
#LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == "High",]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
All_IR = All_IR[,c(1:4,6)]
colnames(All_IR) = c("chr", "start", "end", "transcript_id", "strand")
All_IR$transcript_id = paste0("Reg_", All_IR$transcript_id)
All_IR$"Type" = "Intergenic Region"
ALL = rbind(All_genes, All_lncRNAs, All_IR)
View(ALL)
### Join all the info ALL and RES.
TAB = merge(ALL, RES[,c("transcript_id", "Repeat_id", "Repeat_type_1", "Repeat_type_2")], by = "transcript_id", all.x = T, all.y = F)
### Convert all NA values to No_overlap. They are the genes, lncRNAs and IR which haven't overlap on some repeat region.
TAB[is.na(TAB)] = "No overlap"
View(TAB)
################################################################################
#
# Extract gene name, strand and chromosome info from the GFF3 annotation file and
# create a list for each chromosome with the gene name and strand info.
#
################################################################################
rm(list = ls())
## EXECUTION IN COMMAND LINE:
#EXAMPLE --> Extract_info_genes_GFF3.R path_in path_out spe1 spe2
## 0. INSTALL AND LOAD LIBRARIES
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggExtra))
suppressMessages(options(bitmapType='cairo'))
options(stringsAsFactors = F)
## 1. VARIABLES
path_res = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results"
species = c("car", "cla", "cma", "cme", "cmo", "cpe", "csa", "lsi", "mch")
## 2. CREATE FINAL TABLE
cat("\nCreating the FINAL table:\n")
c = 1
for (spe in species) {
cat(paste0("\t", spe, "...\n"))
### Paths.
WD_01 = paste0(path_res, "/11-TEs_and_genomic_repeats/02-Comparison_Genes_LncRNAs")
WD_02 = paste0(path_res, "/05-predict_lncRNAs")
### Genes, LncRNAs and IR intersected with Repeat regions.
res_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_genes) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_IR) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR$transcript_id = paste0("Reg_", res_IR$transcript_id)
RES = rbind(res_genes, res_lncRNAs, res_IR)
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
All_genes = All_genes[,c(1:4,6)]
colnames(All_genes) = c("chr", "start", "end", "transcript_id", "strand")
All_genes$"Type" = "Protein Coding"
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
#LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == "High",]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
All_IR = All_IR[,c(1:4,6)]
colnames(All_IR) = c("chr", "start", "end", "transcript_id", "strand")
All_IR$transcript_id = paste0("Reg_", All_IR$transcript_id)
All_IR$"Type" = "Intergenic Region"
ALL = rbind(All_genes, All_lncRNAs, All_IR)
### Join all the info ALL and RES.
TAB = merge(ALL, RES[,c("transcript_id", "Repeat_id", "Repeat_type_1", "Repeat_type_2")], by = "transcript_id", all.x = T, all.y = F)
### Convert all NA values to No_overlap. They are the genes, lncRNAs and IR which haven't overlap on some repeat region.
TAB[is.na(TAB)] = "No overlap"
### Modify the Repeat_type_2 values to make easier the downstream analysis.
TAB$"Repeat_type_2_mod" = ifelse(grepl("LINE", TAB$Repeat_type_2, fixed = T), "LINE",
ifelse(grepl("SINE", TAB$Repeat_type_2, fixed = T), "SINE",
ifelse(grepl("LTR", TAB$Repeat_type_2, fixed = T), "LTR",
ifelse(TAB$Repeat_type_2 == "Simple_repeat", "Simple repeat",
ifelse(TAB$Repeat_type_2 == "Unknown", "Unknown",
ifelse(grepl("DNA/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(TAB$Repeat_type_2 == "Low_complexity", "Low complexity repeat",
ifelse(grepl("RC/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
"No overlap"))))))))
### Add class code info to the table. u (intergenic), x (antisense), i (intronic), o/e (sense), pc (protein coding) and ir (intergenic region).
TAB = merge(TAB, LncRNAs_db[,c("ID_transcript", "Class_code")], by.x = "transcript_id", by.y = "ID_transcript", all.x = T, all.y = F)
TAB$Class_code = ifelse(TAB$Type == "Protein Coding", "pc", ifelse(TAB$Type == "Intergenic Region", "ir", TAB$Class_code))
TAB[TAB == "o"] = "o/e"
TAB[TAB == "e"] = "o/e"
### Create factor classes.
TAB$Class_code = factor(TAB$Class_code, levels = c("pc", "u", "x", "i", "o/e", "ir"))
TAB$Repeat_type_2_mod = factor(TAB$Repeat_type_2_mod, levels = c("Simple repeat", "Low complexity repeat", "SINE",
"LINE", "LTR", "DNA transposon", "Unknown", "No overlap"))
### Add specie info.
TAB$"spe" = spe
## Join TAB to the TAB_FINAL table.
if (c == 1) {
TAB_FINAL = TAB
} else {
TAB_FINAL = rbind(TAB_FINAL, TAB)
}
c = c + 1
}
## 3. CREATE SUMMARY TABLE
cat("\nCreating the SUMMARY table...\n")
### Convert spe to factor.
TAB_FINAL$spe = factor(TAB_FINAL$spe, levels = species)
### Create a temporal FINAL TABLE to remove the redundancy. I mean, a transcript which overlap with
### the same kind of repeat several times because you can find this repeat sequence in several genome positions.
TAB_FINAL_temp = TAB_FINAL[, c("transcript_id", "Class_code", "Repeat_type_2_mod", "spe")]
TAB_FINAL_temp = TAB_FINAL_temp[!duplicated(TAB_FINAL_temp),]
### Create summary table.
TAB_FINAL_temp$"Counts" = 1
TAB_SUMMARY_temp = TAB_FINAL_temp %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = sum(Counts))
TAB_SUMMARY_temp = as.data.frame(TAB_SUMMARY_temp)
### Add total number of unique transcripts.
c = 1
for (spe in species) {
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
Total_genes = dim(All_genes)[1]
#LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == "High",]
Total_u = dim(LncRNAs_db[LncRNAs_db$Class_code == "u",])[1]
Total_x = dim(LncRNAs_db[LncRNAs_db$Class_code == "x",])[1]
Total_i = dim(LncRNAs_db[LncRNAs_db$Class_code == "i",])[1]
Total_oe = dim(LncRNAs_db[LncRNAs_db$Class_code == "o" | LncRNAs_db$Class_code == "e",])[1]
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
Total_IR = dim(All_IR)[1]
### Add total info.
pc = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "pc",]
pc$"Total" = Total_genes
u = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "u",]
u$"Total" = Total_u
x = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "x",]
x$"Total" = Total_x
i = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "i",]
i$"Total" = Total_i
oe = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "o/e",]
oe$"Total" = Total_oe
ir = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "ir",]
ir$"Total" = Total_IR
### Join the results.
temp = rbind(pc,u,x,i,oe,ir)
if (c == 1) {
TAB_SUMMARY = temp
} else {
TAB_SUMMARY = rbind(TAB_SUMMARY, temp)
}
c = c + 1
}
### Get percentage.
TAB_SUMMARY$"Percentage" = round((TAB_SUMMARY$sum.Counts*100)/TAB_SUMMARY$Total, 1)
### Add percentage masked genome.
masked_perc = read.table(paste0(path_res, "/11-TEs_and_genomic_repeats/01-Repeat_calling/02-RepeatMasker/masked_genome_percentage.tsv"), header = T, sep = "\t", quote = "\"")
TAB_SUMMARY = merge(TAB_SUMMARY, masked_perc, by = "spe", all = T)
### Remove variables.
rm(list = c("ALL", "All_genes", "All_IR", "All_lncRNAs", "LncRNAs_db", "RES",
"res_genes", "res_IR", "res_lncRNAs", "spe", "TAB", "WD_02", "c",
"TAB_FINAL_temp", "TAB_SUMMARY_temp", "pc", "u", "x", "i", "oe",
"ir", "Total_genes", "Total_u", "Total_x", "Total_i", "Total_oe",
"Total_IR", "temp", "masked_perc"))
## 4. FIGURE
cat("\nDrawing the SUMMARY table...")
TAB_SUMMARY$"facet" = paste0(TAB_SUMMARY$spe, " (", TAB_SUMMARY$masked_perc, "%)")
gg = ggplot(TAB_SUMMARY, aes(x = Repeat_type_2_mod, y = Percentage, fill = Repeat_type_2_mod)) +
geom_bar(position=position_dodge(), aes(y=Percentage), stat="identity") +
facet_grid(facet ~ Class_code) +
scale_fill_manual(values = c("#bc3c29", "#0072b5", "#e18727", "#20854e", "#7876b1", "#6f99ad", "#ffdc91", "#efc000")) +
scale_y_continuous(limits = c(0, 75), breaks = seq(0, 75, by = 10), expand = c(0.02, 5)) +
xlab("") +
ylab("Percentage (%)") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(axis.text.x = element_text(vjust = 0.5, hjust=0.5, angle = 80)) +
theme(legend.position = "none") +
geom_text(aes(label=paste0(Percentage, "\n(", sum.Counts,")")), vjust=-0.2, size = 2)
ggsave(paste0(WD_01, "/Percentage_repeat_strandness_2_r.png"), height = 16, width = 12, dpi = 600)
rm(list = c("gg"))
################################################################################
#
# Extract gene name, strand and chromosome info from the GFF3 annotation file and
# create a list for each chromosome with the gene name and strand info.
#
################################################################################
rm(list = ls())
## EXECUTION IN COMMAND LINE:
#EXAMPLE --> Extract_info_genes_GFF3.R path_in path_out spe1 spe2
## 0. INSTALL AND LOAD LIBRARIES
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggExtra))
suppressMessages(options(bitmapType='cairo'))
options(stringsAsFactors = F)
## 1. VARIABLES
path_res = "/mnt/doctorado/3-lncRNAs/Cucurbitaceae/Results"
species = c("car", "cla", "cma", "cme", "cmo", "cpe", "csa", "lsi", "mch")
## 2. CREATE FINAL TABLE
cat("\nCreating the FINAL table:\n")
c = 1
for (spe in species) {
cat(paste0("\t", spe, "...\n"))
### Paths.
WD_01 = paste0(path_res, "/11-TEs_and_genomic_repeats/02-Comparison_Genes_LncRNAs")
WD_02 = paste0(path_res, "/05-predict_lncRNAs")
### Genes, LncRNAs and IR intersected with Repeat regions.
res_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_genes) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR_intersect_Rep.tsv"), header = F, sep = "\t", quote = "\"")
colnames(res_IR) = c("chr", "start", "end", "transcript_id", "strand", "Repeat_id", "Repeat_type_1", "Repeat_type_2")
res_IR$transcript_id = paste0("Reg_", res_IR$transcript_id)
RES = rbind(res_genes, res_lncRNAs, res_IR)
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
All_genes = All_genes[,c(1:4,6)]
colnames(All_genes) = c("chr", "start", "end", "transcript_id", "strand")
All_genes$"Type" = "Protein Coding"
All_lncRNAs = read.table(paste0(WD_01, "/", spe, "/POTENTIAL_LNCRNAS_pred.bed"), header = F, sep = "\t", quote = "\"")
All_lncRNAs = All_lncRNAs[,c(1:4,6)]
colnames(All_lncRNAs) = c("chr", "start", "end", "transcript_id", "strand")
All_lncRNAs$"Type" = "LncRNA"
#LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == "High",]
All_lncRNAs = All_lncRNAs[All_lncRNAs$transcript_id %in% LncRNAs_db$ID_transcript,]
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
All_IR = All_IR[,c(1:4,6)]
colnames(All_IR) = c("chr", "start", "end", "transcript_id", "strand")
All_IR$transcript_id = paste0("Reg_", All_IR$transcript_id)
All_IR$"Type" = "Intergenic Region"
ALL = rbind(All_genes, All_lncRNAs, All_IR)
### Join all the info ALL and RES.
TAB = merge(ALL, RES[,c("transcript_id", "Repeat_id", "Repeat_type_1", "Repeat_type_2")], by = "transcript_id", all.x = T, all.y = F)
### Convert all NA values to No_overlap. They are the genes, lncRNAs and IR which haven't overlap on some repeat region.
TAB[is.na(TAB)] = "No overlap"
### Modify the Repeat_type_2 values to make easier the downstream analysis.
TAB$"Repeat_type_2_mod" = ifelse(grepl("LINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("SINE", TAB$Repeat_type_2, fixed = T), "LINE/SINE",
ifelse(grepl("LTR", TAB$Repeat_type_2, fixed = T), "LTR",
ifelse(TAB$Repeat_type_2 == "Simple_repeat", "Simple repeat",
ifelse(TAB$Repeat_type_2 == "Unknown", "Unknown",
ifelse(grepl("DNA/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
ifelse(TAB$Repeat_type_2 == "Low_complexity", "Low complexity repeat",
ifelse(grepl("RC/", TAB$Repeat_type_2, fixed = T), "DNA transposon",
"No overlap"))))))))
### Add class code info to the table. u (intergenic), x (antisense), i (intronic), o/e (sense), pc (protein coding) and ir (intergenic region).
TAB = merge(TAB, LncRNAs_db[,c("ID_transcript", "Class_code")], by.x = "transcript_id", by.y = "ID_transcript", all.x = T, all.y = F)
TAB$Class_code = ifelse(TAB$Type == "Protein Coding", "pc", ifelse(TAB$Type == "Intergenic Region", "ir", TAB$Class_code))
TAB[TAB == "o"] = "o/e"
TAB[TAB == "e"] = "o/e"
### Create factor classes.
TAB$Class_code = factor(TAB$Class_code, levels = c("pc", "u", "x", "i", "o/e", "ir"))
TAB$Repeat_type_2_mod = factor(TAB$Repeat_type_2_mod, levels = c("Simple repeat", "Low complexity repeat", "LINE/SINE",
"LTR", "DNA transposon", "Unknown", "No overlap"))
### Add specie info.
TAB$"spe" = spe
## Join TAB to the TAB_FINAL table.
if (c == 1) {
TAB_FINAL = TAB
} else {
TAB_FINAL = rbind(TAB_FINAL, TAB)
}
c = c + 1
}
## 3. CREATE SUMMARY TABLE
cat("\nCreating the SUMMARY table...\n")
### Convert spe to factor.
TAB_FINAL$spe = factor(TAB_FINAL$spe, levels = species)
### Create a temporal FINAL TABLE to remove the redundancy. I mean, a transcript which overlap with
### the same kind of repeat several times because you can find this repeat sequence in several genome positions.
TAB_FINAL_temp = TAB_FINAL[, c("transcript_id", "Class_code", "Repeat_type_2_mod", "spe")]
TAB_FINAL_temp = TAB_FINAL_temp[!duplicated(TAB_FINAL_temp),]
### Create summary table.
TAB_FINAL_temp$"Counts" = 1
TAB_SUMMARY_temp = TAB_FINAL_temp %>%
group_by(spe, Class_code, Repeat_type_2_mod, .drop=FALSE) %>%
summarise(
sum.Counts = sum(Counts))
TAB_SUMMARY_temp = as.data.frame(TAB_SUMMARY_temp)
### Add total number of unique transcripts.
c = 1
for (spe in species) {
### All the genes, lncRNAs and IR.
All_genes = read.table(paste0(WD_01, "/", spe, "/ORIGINAL_GENES.bed"), header = F, sep = "\t", quote = "\"")
Total_genes = dim(All_genes)[1]
#LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs_NR.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = read.table(paste0(WD_02, "/", spe, "/STEP-FINAL/Database/Database_LncRNAs.tsv"), header = T, sep = "\t", quote = "\"")
LncRNAs_db = LncRNAs_db[LncRNAs_db$Significance_level == "High",]
Total_u = dim(LncRNAs_db[LncRNAs_db$Class_code == "u",])[1]
Total_x = dim(LncRNAs_db[LncRNAs_db$Class_code == "x",])[1]
Total_i = dim(LncRNAs_db[LncRNAs_db$Class_code == "i",])[1]
Total_oe = dim(LncRNAs_db[LncRNAs_db$Class_code == "o" | LncRNAs_db$Class_code == "e",])[1]
All_IR = read.table(paste0(WD_01, "/", spe, "/Random_IR.bed"), header = F, sep = "\t", quote = "\"")
Total_IR = dim(All_IR)[1]
### Add total info.
pc = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "pc",]
pc$"Total" = Total_genes
u = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "u",]
u$"Total" = Total_u
x = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "x",]
x$"Total" = Total_x
i = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "i",]
i$"Total" = Total_i
oe = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "o/e",]
oe$"Total" = Total_oe
ir = TAB_SUMMARY_temp[TAB_SUMMARY_temp$spe == spe & TAB_SUMMARY_temp$Class_code == "ir",]
ir$"Total" = Total_IR
### Join the results.
temp = rbind(pc,u,x,i,oe,ir)
if (c == 1) {
TAB_SUMMARY = temp
} else {
TAB_SUMMARY = rbind(TAB_SUMMARY, temp)
}
c = c + 1
}
### Get percentage.
TAB_SUMMARY$"Percentage" = round((TAB_SUMMARY$sum.Counts*100)/TAB_SUMMARY$Total, 1)
### Add percentage masked genome.
masked_perc = read.table(paste0(path_res, "/11-TEs_and_genomic_repeats/01-Repeat_calling/02-RepeatMasker/masked_genome_percentage.tsv"), header = T, sep = "\t", quote = "\"")
TAB_SUMMARY = merge(TAB_SUMMARY, masked_perc, by = "spe", all = T)
### Remove variables.
rm(list = c("ALL", "All_genes", "All_IR", "All_lncRNAs", "LncRNAs_db", "RES",
"res_genes", "res_IR", "res_lncRNAs", "spe", "TAB", "WD_02", "c",
"TAB_FINAL_temp", "TAB_SUMMARY_temp", "pc", "u", "x", "i", "oe",
"ir", "Total_genes", "Total_u", "Total_x", "Total_i", "Total_oe",
"Total_IR", "temp", "masked_perc"))
## 4. FIGURE
cat("\nDrawing the SUMMARY table...")
TAB_SUMMARY$"facet" = paste0(TAB_SUMMARY$spe, " (", TAB_SUMMARY$masked_perc, "%)")
gg = ggplot(TAB_SUMMARY, aes(x = Repeat_type_2_mod, y = Percentage, fill = Repeat_type_2_mod)) +
geom_bar(position=position_dodge(), aes(y=Percentage), stat="identity") +
facet_grid(facet ~ Class_code) +
#scale_fill_manual(values = c("#bc3c29", "#0072b5", "#e18727", "#20854e", "#7876b1", "#6f99ad", "#ffdc91", "#efc000")) +
scale_fill_manual(values = c("#bc3c29", "#0072b5", "#e18727", "#20854e", "#7876b1", "#6f99ad", "#efc000")) +
scale_y_continuous(limits = c(0, 75), breaks = seq(0, 75, by = 10), expand = c(0.02, 5)) +
xlab("") +
ylab("Percentage (%)") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) +
theme(axis.text.x = element_text(vjust = 0.5, hjust=0.5, angle = 80)) +
theme(legend.position = "none") +
geom_text(aes(label=paste0(Percentage, "\n(", sum.Counts,")")), vjust=-0.2, size = 2)
ggsave(paste0(WD_01, "/Percentage_repeat_strandness_2_r.png"), height = 16, width = 12, dpi = 600)
rm(list = c("gg"))
